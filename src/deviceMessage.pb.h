// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deviceMessage.proto

#ifndef PROTOBUF_deviceMessage_2eproto__INCLUDED
#define PROTOBUF_deviceMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mynigma {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_deviceMessage_2eproto();
void protobuf_AssignDesc_deviceMessage_2eproto();
void protobuf_ShutdownFile_deviceMessage_2eproto();

class deviceMessage;

// ===================================================================

class deviceMessage : public ::google::protobuf::Message {
 public:
  deviceMessage();
  virtual ~deviceMessage();

  deviceMessage(const deviceMessage& from);

  inline deviceMessage& operator=(const deviceMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const deviceMessage& default_instance();

  void Swap(deviceMessage* other);

  // implements Message ----------------------------------------------

  deviceMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const deviceMessage& from);
  void MergeFrom(const deviceMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message_kind = 1;
  inline bool has_message_kind() const;
  inline void clear_message_kind();
  static const int kMessageKindFieldNumber = 1;
  inline const ::std::string& message_kind() const;
  inline void set_message_kind(const ::std::string& value);
  inline void set_message_kind(const char* value);
  inline void set_message_kind(const char* value, size_t size);
  inline ::std::string* mutable_message_kind();
  inline ::std::string* release_message_kind();
  inline void set_allocated_message_kind(::std::string* message_kind);

  // repeated bytes payload = 2;
  inline int payload_size() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline const ::std::string& payload(int index) const;
  inline ::std::string* mutable_payload(int index);
  inline void set_payload(int index, const ::std::string& value);
  inline void set_payload(int index, const char* value);
  inline void set_payload(int index, const void* value, size_t size);
  inline ::std::string* add_payload();
  inline void add_payload(const ::std::string& value);
  inline void add_payload(const char* value);
  inline void add_payload(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& payload() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_payload();

  // optional int64 sent_date = 3;
  inline bool has_sent_date() const;
  inline void clear_sent_date();
  static const int kSentDateFieldNumber = 3;
  inline ::google::protobuf::int64 sent_date() const;
  inline void set_sent_date(::google::protobuf::int64 value);

  // optional int64 expiry_date = 4;
  inline bool has_expiry_date() const;
  inline void clear_expiry_date();
  static const int kExpiryDateFieldNumber = 4;
  inline ::google::protobuf::int64 expiry_date() const;
  inline void set_expiry_date(::google::protobuf::int64 value);

  // optional bool burn_after_reading = 5;
  inline bool has_burn_after_reading() const;
  inline void clear_burn_after_reading();
  static const int kBurnAfterReadingFieldNumber = 5;
  inline bool burn_after_reading() const;
  inline void set_burn_after_reading(bool value);

  // optional string thread_ID = 6;
  inline bool has_thread_id() const;
  inline void clear_thread_id();
  static const int kThreadIDFieldNumber = 6;
  inline const ::std::string& thread_id() const;
  inline void set_thread_id(const ::std::string& value);
  inline void set_thread_id(const char* value);
  inline void set_thread_id(const char* value, size_t size);
  inline ::std::string* mutable_thread_id();
  inline ::std::string* release_thread_id();
  inline void set_allocated_thread_id(::std::string* thread_id);

  // optional string sender_UUID = 7;
  inline bool has_sender_uuid() const;
  inline void clear_sender_uuid();
  static const int kSenderUUIDFieldNumber = 7;
  inline const ::std::string& sender_uuid() const;
  inline void set_sender_uuid(const ::std::string& value);
  inline void set_sender_uuid(const char* value);
  inline void set_sender_uuid(const char* value, size_t size);
  inline ::std::string* mutable_sender_uuid();
  inline ::std::string* release_sender_uuid();
  inline void set_allocated_sender_uuid(::std::string* sender_uuid);

  // repeated string recipient_UUIDs = 8;
  inline int recipient_uuids_size() const;
  inline void clear_recipient_uuids();
  static const int kRecipientUUIDsFieldNumber = 8;
  inline const ::std::string& recipient_uuids(int index) const;
  inline ::std::string* mutable_recipient_uuids(int index);
  inline void set_recipient_uuids(int index, const ::std::string& value);
  inline void set_recipient_uuids(int index, const char* value);
  inline void set_recipient_uuids(int index, const char* value, size_t size);
  inline ::std::string* add_recipient_uuids();
  inline void add_recipient_uuids(const ::std::string& value);
  inline void add_recipient_uuids(const char* value);
  inline void add_recipient_uuids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& recipient_uuids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_recipient_uuids();

  // @@protoc_insertion_point(class_scope:mynigma.deviceMessage)
 private:
  inline void set_has_message_kind();
  inline void clear_has_message_kind();
  inline void set_has_sent_date();
  inline void clear_has_sent_date();
  inline void set_has_expiry_date();
  inline void clear_has_expiry_date();
  inline void set_has_burn_after_reading();
  inline void clear_has_burn_after_reading();
  inline void set_has_thread_id();
  inline void clear_has_thread_id();
  inline void set_has_sender_uuid();
  inline void clear_has_sender_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_kind_;
  ::google::protobuf::RepeatedPtrField< ::std::string> payload_;
  ::google::protobuf::int64 sent_date_;
  ::google::protobuf::int64 expiry_date_;
  ::std::string* thread_id_;
  ::std::string* sender_uuid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> recipient_uuids_;
  bool burn_after_reading_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_deviceMessage_2eproto();
  friend void protobuf_AssignDesc_deviceMessage_2eproto();
  friend void protobuf_ShutdownFile_deviceMessage_2eproto();

  void InitAsDefaultInstance();
  static deviceMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// deviceMessage

// optional string message_kind = 1;
inline bool deviceMessage::has_message_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void deviceMessage::set_has_message_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void deviceMessage::clear_has_message_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void deviceMessage::clear_message_kind() {
  if (message_kind_ != &::google::protobuf::internal::kEmptyString) {
    message_kind_->clear();
  }
  clear_has_message_kind();
}
inline const ::std::string& deviceMessage::message_kind() const {
  return *message_kind_;
}
inline void deviceMessage::set_message_kind(const ::std::string& value) {
  set_has_message_kind();
  if (message_kind_ == &::google::protobuf::internal::kEmptyString) {
    message_kind_ = new ::std::string;
  }
  message_kind_->assign(value);
}
inline void deviceMessage::set_message_kind(const char* value) {
  set_has_message_kind();
  if (message_kind_ == &::google::protobuf::internal::kEmptyString) {
    message_kind_ = new ::std::string;
  }
  message_kind_->assign(value);
}
inline void deviceMessage::set_message_kind(const char* value, size_t size) {
  set_has_message_kind();
  if (message_kind_ == &::google::protobuf::internal::kEmptyString) {
    message_kind_ = new ::std::string;
  }
  message_kind_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* deviceMessage::mutable_message_kind() {
  set_has_message_kind();
  if (message_kind_ == &::google::protobuf::internal::kEmptyString) {
    message_kind_ = new ::std::string;
  }
  return message_kind_;
}
inline ::std::string* deviceMessage::release_message_kind() {
  clear_has_message_kind();
  if (message_kind_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_kind_;
    message_kind_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void deviceMessage::set_allocated_message_kind(::std::string* message_kind) {
  if (message_kind_ != &::google::protobuf::internal::kEmptyString) {
    delete message_kind_;
  }
  if (message_kind) {
    set_has_message_kind();
    message_kind_ = message_kind;
  } else {
    clear_has_message_kind();
    message_kind_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated bytes payload = 2;
inline int deviceMessage::payload_size() const {
  return payload_.size();
}
inline void deviceMessage::clear_payload() {
  payload_.Clear();
}
inline const ::std::string& deviceMessage::payload(int index) const {
  return payload_.Get(index);
}
inline ::std::string* deviceMessage::mutable_payload(int index) {
  return payload_.Mutable(index);
}
inline void deviceMessage::set_payload(int index, const ::std::string& value) {
  payload_.Mutable(index)->assign(value);
}
inline void deviceMessage::set_payload(int index, const char* value) {
  payload_.Mutable(index)->assign(value);
}
inline void deviceMessage::set_payload(int index, const void* value, size_t size) {
  payload_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* deviceMessage::add_payload() {
  return payload_.Add();
}
inline void deviceMessage::add_payload(const ::std::string& value) {
  payload_.Add()->assign(value);
}
inline void deviceMessage::add_payload(const char* value) {
  payload_.Add()->assign(value);
}
inline void deviceMessage::add_payload(const void* value, size_t size) {
  payload_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
deviceMessage::payload() const {
  return payload_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
deviceMessage::mutable_payload() {
  return &payload_;
}

// optional int64 sent_date = 3;
inline bool deviceMessage::has_sent_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void deviceMessage::set_has_sent_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void deviceMessage::clear_has_sent_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void deviceMessage::clear_sent_date() {
  sent_date_ = GOOGLE_LONGLONG(0);
  clear_has_sent_date();
}
inline ::google::protobuf::int64 deviceMessage::sent_date() const {
  return sent_date_;
}
inline void deviceMessage::set_sent_date(::google::protobuf::int64 value) {
  set_has_sent_date();
  sent_date_ = value;
}

// optional int64 expiry_date = 4;
inline bool deviceMessage::has_expiry_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void deviceMessage::set_has_expiry_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void deviceMessage::clear_has_expiry_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void deviceMessage::clear_expiry_date() {
  expiry_date_ = GOOGLE_LONGLONG(0);
  clear_has_expiry_date();
}
inline ::google::protobuf::int64 deviceMessage::expiry_date() const {
  return expiry_date_;
}
inline void deviceMessage::set_expiry_date(::google::protobuf::int64 value) {
  set_has_expiry_date();
  expiry_date_ = value;
}

// optional bool burn_after_reading = 5;
inline bool deviceMessage::has_burn_after_reading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void deviceMessage::set_has_burn_after_reading() {
  _has_bits_[0] |= 0x00000010u;
}
inline void deviceMessage::clear_has_burn_after_reading() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void deviceMessage::clear_burn_after_reading() {
  burn_after_reading_ = false;
  clear_has_burn_after_reading();
}
inline bool deviceMessage::burn_after_reading() const {
  return burn_after_reading_;
}
inline void deviceMessage::set_burn_after_reading(bool value) {
  set_has_burn_after_reading();
  burn_after_reading_ = value;
}

// optional string thread_ID = 6;
inline bool deviceMessage::has_thread_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void deviceMessage::set_has_thread_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void deviceMessage::clear_has_thread_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void deviceMessage::clear_thread_id() {
  if (thread_id_ != &::google::protobuf::internal::kEmptyString) {
    thread_id_->clear();
  }
  clear_has_thread_id();
}
inline const ::std::string& deviceMessage::thread_id() const {
  return *thread_id_;
}
inline void deviceMessage::set_thread_id(const ::std::string& value) {
  set_has_thread_id();
  if (thread_id_ == &::google::protobuf::internal::kEmptyString) {
    thread_id_ = new ::std::string;
  }
  thread_id_->assign(value);
}
inline void deviceMessage::set_thread_id(const char* value) {
  set_has_thread_id();
  if (thread_id_ == &::google::protobuf::internal::kEmptyString) {
    thread_id_ = new ::std::string;
  }
  thread_id_->assign(value);
}
inline void deviceMessage::set_thread_id(const char* value, size_t size) {
  set_has_thread_id();
  if (thread_id_ == &::google::protobuf::internal::kEmptyString) {
    thread_id_ = new ::std::string;
  }
  thread_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* deviceMessage::mutable_thread_id() {
  set_has_thread_id();
  if (thread_id_ == &::google::protobuf::internal::kEmptyString) {
    thread_id_ = new ::std::string;
  }
  return thread_id_;
}
inline ::std::string* deviceMessage::release_thread_id() {
  clear_has_thread_id();
  if (thread_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = thread_id_;
    thread_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void deviceMessage::set_allocated_thread_id(::std::string* thread_id) {
  if (thread_id_ != &::google::protobuf::internal::kEmptyString) {
    delete thread_id_;
  }
  if (thread_id) {
    set_has_thread_id();
    thread_id_ = thread_id;
  } else {
    clear_has_thread_id();
    thread_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sender_UUID = 7;
inline bool deviceMessage::has_sender_uuid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void deviceMessage::set_has_sender_uuid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void deviceMessage::clear_has_sender_uuid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void deviceMessage::clear_sender_uuid() {
  if (sender_uuid_ != &::google::protobuf::internal::kEmptyString) {
    sender_uuid_->clear();
  }
  clear_has_sender_uuid();
}
inline const ::std::string& deviceMessage::sender_uuid() const {
  return *sender_uuid_;
}
inline void deviceMessage::set_sender_uuid(const ::std::string& value) {
  set_has_sender_uuid();
  if (sender_uuid_ == &::google::protobuf::internal::kEmptyString) {
    sender_uuid_ = new ::std::string;
  }
  sender_uuid_->assign(value);
}
inline void deviceMessage::set_sender_uuid(const char* value) {
  set_has_sender_uuid();
  if (sender_uuid_ == &::google::protobuf::internal::kEmptyString) {
    sender_uuid_ = new ::std::string;
  }
  sender_uuid_->assign(value);
}
inline void deviceMessage::set_sender_uuid(const char* value, size_t size) {
  set_has_sender_uuid();
  if (sender_uuid_ == &::google::protobuf::internal::kEmptyString) {
    sender_uuid_ = new ::std::string;
  }
  sender_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* deviceMessage::mutable_sender_uuid() {
  set_has_sender_uuid();
  if (sender_uuid_ == &::google::protobuf::internal::kEmptyString) {
    sender_uuid_ = new ::std::string;
  }
  return sender_uuid_;
}
inline ::std::string* deviceMessage::release_sender_uuid() {
  clear_has_sender_uuid();
  if (sender_uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_uuid_;
    sender_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void deviceMessage::set_allocated_sender_uuid(::std::string* sender_uuid) {
  if (sender_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_uuid_;
  }
  if (sender_uuid) {
    set_has_sender_uuid();
    sender_uuid_ = sender_uuid;
  } else {
    clear_has_sender_uuid();
    sender_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string recipient_UUIDs = 8;
inline int deviceMessage::recipient_uuids_size() const {
  return recipient_uuids_.size();
}
inline void deviceMessage::clear_recipient_uuids() {
  recipient_uuids_.Clear();
}
inline const ::std::string& deviceMessage::recipient_uuids(int index) const {
  return recipient_uuids_.Get(index);
}
inline ::std::string* deviceMessage::mutable_recipient_uuids(int index) {
  return recipient_uuids_.Mutable(index);
}
inline void deviceMessage::set_recipient_uuids(int index, const ::std::string& value) {
  recipient_uuids_.Mutable(index)->assign(value);
}
inline void deviceMessage::set_recipient_uuids(int index, const char* value) {
  recipient_uuids_.Mutable(index)->assign(value);
}
inline void deviceMessage::set_recipient_uuids(int index, const char* value, size_t size) {
  recipient_uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* deviceMessage::add_recipient_uuids() {
  return recipient_uuids_.Add();
}
inline void deviceMessage::add_recipient_uuids(const ::std::string& value) {
  recipient_uuids_.Add()->assign(value);
}
inline void deviceMessage::add_recipient_uuids(const char* value) {
  recipient_uuids_.Add()->assign(value);
}
inline void deviceMessage::add_recipient_uuids(const char* value, size_t size) {
  recipient_uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
deviceMessage::recipient_uuids() const {
  return recipient_uuids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
deviceMessage::mutable_recipient_uuids() {
  return &recipient_uuids_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mynigma

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_deviceMessage_2eproto__INCLUDED
