// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: syncData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "syncData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mynigma {

namespace {

const ::google::protobuf::Descriptor* privateKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  privateKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* publicKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  publicKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* accountLoginData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  accountLoginData_reflection_ = NULL;
const ::google::protobuf::Descriptor* confidentialAccountData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  confidentialAccountData_reflection_ = NULL;
const ::google::protobuf::Descriptor* contactDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  contactDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* syncKeyExpectation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  syncKeyExpectation_reflection_ = NULL;
const ::google::protobuf::Descriptor* syncPrivateKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  syncPrivateKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* syncPublicKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  syncPublicKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* syncData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  syncData_reflection_ = NULL;
const ::google::protobuf::Descriptor* deviceDiscoveryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  deviceDiscoveryData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_syncData_2eproto() {
  protobuf_AddDesc_syncData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "syncData.proto");
  GOOGLE_CHECK(file != NULL);
  privateKey_descriptor_ = file->message_type(0);
  static const int privateKey_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, encrkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, verkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, keylabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, datecreated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, iscompromised_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, currentreceivedforemail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, currentsentforemail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, decrkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, signkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, iscurrent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, emailaddresses_),
  };
  privateKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      privateKey_descriptor_,
      privateKey::default_instance_,
      privateKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(privateKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(privateKey));
  publicKey_descriptor_ = file->message_type(1);
  static const int publicKey_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, encrkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, verkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, keylabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, datecreated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, compromised_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, currentkeyforemail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, dateobtained_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, datedeclared_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, iscompromised_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, fromserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, introduceskeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, isintroducedbykeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, iscurrent_),
  };
  publicKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      publicKey_descriptor_,
      publicKey::default_instance_,
      publicKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(publicKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(publicKey));
  accountLoginData_descriptor_ = file->message_type(2);
  static const int accountLoginData_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, inhostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, outhostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, inusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, outusername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, inpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, outpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, inport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, outport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, inencryption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, outencryption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, inauthtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, outauthtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, sendername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, senderemail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, displayname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, copyintosent_),
  };
  accountLoginData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      accountLoginData_descriptor_,
      accountLoginData::default_instance_,
      accountLoginData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(accountLoginData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(accountLoginData));
  confidentialAccountData_descriptor_ = file->message_type(3);
  static const int confidentialAccountData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(confidentialAccountData, privkeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(confidentialAccountData, pubkeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(confidentialAccountData, accounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(confidentialAccountData, version_),
  };
  confidentialAccountData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      confidentialAccountData_descriptor_,
      confidentialAccountData::default_instance_,
      confidentialAccountData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(confidentialAccountData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(confidentialAccountData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(confidentialAccountData));
  contactDetail_descriptor_ = file->message_type(4);
  static const int contactDetail_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contactDetail, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contactDetail, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contactDetail, emailaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contactDetail, currentsentkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contactDetail, datesentkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contactDetail, currentreceivedkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contactDetail, datereceivedkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contactDetail, numberoftimescontacted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contactDetail, lastcheckedwithserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contactDetail, fullname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contactDetail, lastinfochange_),
  };
  contactDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      contactDetail_descriptor_,
      contactDetail::default_instance_,
      contactDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contactDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(contactDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(contactDetail));
  syncKeyExpectation_descriptor_ = file->message_type(5);
  static const int syncKeyExpectation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncKeyExpectation, fromaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncKeyExpectation, toaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncKeyExpectation, keylabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncKeyExpectation, dateanchored_),
  };
  syncKeyExpectation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      syncKeyExpectation_descriptor_,
      syncKeyExpectation::default_instance_,
      syncKeyExpectation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncKeyExpectation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncKeyExpectation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(syncKeyExpectation));
  syncPrivateKey_descriptor_ = file->message_type(6);
  static const int syncPrivateKey_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, encrkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, verkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, keylabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, datecreated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, iscompromised_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, currentkeyforemail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, dateobtained_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, datedeclared_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, datefirstanchored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, fromserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, introduceskeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, isintroducedbykeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, emailaddresses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, decrkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, signkeydata_),
  };
  syncPrivateKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      syncPrivateKey_descriptor_,
      syncPrivateKey::default_instance_,
      syncPrivateKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPrivateKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(syncPrivateKey));
  syncPublicKey_descriptor_ = file->message_type(7);
  static const int syncPublicKey_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPublicKey, encrkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPublicKey, verkeydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPublicKey, keylabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPublicKey, datecreated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPublicKey, compromised_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPublicKey, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPublicKey, currentkeyforemail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPublicKey, dateobtained_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPublicKey, datedeclared_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPublicKey, datefirstanchored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPublicKey, fromserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPublicKey, introduceskeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPublicKey, isintroducedbykeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPublicKey, emailaddresses_),
  };
  syncPublicKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      syncPublicKey_descriptor_,
      syncPublicKey::default_instance_,
      syncPublicKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPublicKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncPublicKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(syncPublicKey));
  syncData_descriptor_ = file->message_type(8);
  static const int syncData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncData, privkeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncData, pubkeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncData, accounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncData, contacts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncData, keyexpectations_),
  };
  syncData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      syncData_descriptor_,
      syncData::default_instance_,
      syncData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syncData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(syncData));
  deviceDiscoveryData_descriptor_ = file->message_type(9);
  static const int deviceDiscoveryData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceDiscoveryData, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceDiscoveryData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceDiscoveryData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceDiscoveryData, emailadresses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceDiscoveryData, privatekeylabels_),
  };
  deviceDiscoveryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      deviceDiscoveryData_descriptor_,
      deviceDiscoveryData::default_instance_,
      deviceDiscoveryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceDiscoveryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(deviceDiscoveryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(deviceDiscoveryData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_syncData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    privateKey_descriptor_, &privateKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    publicKey_descriptor_, &publicKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    accountLoginData_descriptor_, &accountLoginData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    confidentialAccountData_descriptor_, &confidentialAccountData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    contactDetail_descriptor_, &contactDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    syncKeyExpectation_descriptor_, &syncKeyExpectation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    syncPrivateKey_descriptor_, &syncPrivateKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    syncPublicKey_descriptor_, &syncPublicKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    syncData_descriptor_, &syncData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    deviceDiscoveryData_descriptor_, &deviceDiscoveryData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_syncData_2eproto() {
  delete privateKey::default_instance_;
  delete privateKey_reflection_;
  delete publicKey::default_instance_;
  delete publicKey_reflection_;
  delete accountLoginData::default_instance_;
  delete accountLoginData_reflection_;
  delete confidentialAccountData::default_instance_;
  delete confidentialAccountData_reflection_;
  delete contactDetail::default_instance_;
  delete contactDetail_reflection_;
  delete syncKeyExpectation::default_instance_;
  delete syncKeyExpectation_reflection_;
  delete syncPrivateKey::default_instance_;
  delete syncPrivateKey_reflection_;
  delete syncPublicKey::default_instance_;
  delete syncPublicKey_reflection_;
  delete syncData::default_instance_;
  delete syncData_reflection_;
  delete deviceDiscoveryData::default_instance_;
  delete deviceDiscoveryData_reflection_;
}

void protobuf_AddDesc_syncData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016syncData.proto\022\007mynigma\"\246\002\n\nprivateKey"
    "\022\023\n\013encrKeyData\030\001 \002(\014\022\022\n\nverKeyData\030\002 \002("
    "\014\022\020\n\010keyLabel\030\003 \002(\t\022\023\n\013dateCreated\030\004 \001(\005"
    "\022\025\n\risCompromised\030\005 \001(\010\022\017\n\007version\030\006 \001(\t"
    "\022\037\n\027currentReceivedForEmail\030\007 \003(\t\022\033\n\023cur"
    "rentSentForEmail\030\010 \003(\t\022\023\n\013decrKeyData\030\t "
    "\001(\014\022\023\n\013signKeyData\030\n \001(\014\022\r\n\005email\030\013 \001(\t\022"
    "\021\n\tisCurrent\030\014 \001(\010\022\026\n\016emailAddresses\030\r \003"
    "(\t\"\312\002\n\tpublicKey\022\023\n\013encrKeyData\030\001 \002(\014\022\022\n"
    "\nverKeyData\030\002 \002(\014\022\020\n\010keyLabel\030\003 \002(\t\022\023\n\013d"
    "ateCreated\030\004 \001(\005\022\023\n\013compromised\030\005 \001(\010\022\017\n"
    "\007version\030\006 \001(\t\022\032\n\022currentKeyForEmail\030\007 \003"
    "(\t\022\024\n\014dateObtained\030\010 \001(\005\022\024\n\014dateDeclared"
    "\030\t \001(\005\022\025\n\risCompromised\030\n \001(\010\022\022\n\nfromSer"
    "ver\030\013 \001(\010\022\026\n\016introducesKeys\030\014 \003(\t\022\032\n\022isI"
    "ntroducedByKeys\030\r \003(\t\022\r\n\005email\030\016 \001(\t\022\021\n\t"
    "isCurrent\030\017 \001(\010\"\347\002\n\020accountLoginData\022\022\n\n"
    "inHostname\030\001 \002(\t\022\023\n\013outHostname\030\002 \002(\t\022\022\n"
    "\ninUserName\030\003 \002(\t\022\023\n\013outUserName\030\004 \002(\t\022\022"
    "\n\ninPassword\030\005 \002(\t\022\023\n\013outPassword\030\006 \002(\t\022"
    "\016\n\006inPort\030\007 \002(\005\022\017\n\007outPort\030\010 \002(\005\022\024\n\014inEn"
    "cryption\030\t \002(\005\022\025\n\routEncryption\030\n \002(\005\022\022\n"
    "\ninAuthType\030\013 \002(\005\022\023\n\013outAuthType\030\014 \002(\005\022\r"
    "\n\005email\030\r \002(\t\022\022\n\nsenderName\030\016 \001(\t\022\023\n\013sen"
    "derEmail\030\017 \001(\t\022\023\n\013displayName\030\020 \001(\t\022\024\n\014c"
    "opyIntoSent\030\021 \001(\010\"\243\001\n\027confidentialAccoun"
    "tData\022%\n\010privKeys\030\001 \003(\0132\023.mynigma.privat"
    "eKey\022#\n\007pubKeys\030\002 \003(\0132\022.mynigma.publicKe"
    "y\022+\n\010accounts\030\003 \003(\0132\031.mynigma.accountLog"
    "inData\022\017\n\007version\030\004 \001(\t\"\225\002\n\rcontactDetai"
    "l\022\021\n\tfirstName\030\001 \001(\t\022\020\n\010lastName\030\002 \001(\t\022\024"
    "\n\014emailAddress\030\003 \001(\t\022\026\n\016currentSentKey\030\004"
    " \001(\t\022\023\n\013dateSentKey\030\005 \001(\005\022\032\n\022currentRece"
    "ivedKey\030\006 \001(\t\022\027\n\017dateReceivedKey\030\007 \001(\005\022\036"
    "\n\026numberOfTimesContacted\030\010 \001(\005\022\035\n\025lastCh"
    "eckedWithServer\030\t \001(\005\022\020\n\010fullName\030\n \001(\t\022"
    "\026\n\016lastInfoChange\030\013 \001(\005\"d\n\022syncKeyExpect"
    "ation\022\023\n\013fromAddress\030\001 \001(\t\022\021\n\ttoAddress\030"
    "\002 \001(\t\022\020\n\010keyLabel\030\003 \001(\t\022\024\n\014dateAnchored\030"
    "\004 \001(\005\"\365\002\n\016syncPrivateKey\022\023\n\013encrKeyData\030"
    "\001 \002(\014\022\022\n\nverKeyData\030\002 \002(\014\022\020\n\010keyLabel\030\003 "
    "\002(\t\022\023\n\013dateCreated\030\004 \001(\005\022\025\n\risCompromise"
    "d\030\005 \001(\010\022\017\n\007version\030\006 \001(\t\022\032\n\022currentKeyFo"
    "rEmail\030\007 \003(\t\022\024\n\014dateObtained\030\010 \001(\005\022\024\n\014da"
    "teDeclared\030\t \001(\005\022\031\n\021dateFirstAnchored\030\n "
    "\001(\005\022\022\n\nfromServer\030\013 \001(\010\022\026\n\016introducesKey"
    "s\030\014 \003(\t\022\032\n\022isIntroducedByKeys\030\r \003(\t\022\026\n\016e"
    "mailAddresses\030\016 \003(\t\022\023\n\013decrKeyData\030\017 \001(\014"
    "\022\023\n\013signKeyData\030\020 \001(\014\"\310\002\n\rsyncPublicKey\022"
    "\023\n\013encrKeyData\030\001 \002(\014\022\022\n\nverKeyData\030\002 \002(\014"
    "\022\020\n\010keyLabel\030\003 \002(\t\022\023\n\013dateCreated\030\004 \001(\005\022"
    "\023\n\013compromised\030\005 \001(\010\022\017\n\007version\030\006 \001(\t\022\032\n"
    "\022currentKeyForEmail\030\007 \003(\t\022\024\n\014dateObtaine"
    "d\030\010 \001(\005\022\024\n\014dateDeclared\030\t \001(\005\022\031\n\021dateFir"
    "stAnchored\030\n \001(\005\022\022\n\nfromServer\030\013 \001(\010\022\026\n\016"
    "introducesKeys\030\014 \003(\t\022\032\n\022isIntroducedByKe"
    "ys\030\r \003(\t\022\026\n\016emailAddresses\030\016 \003(\t\"\353\001\n\010syn"
    "cData\022)\n\010privKeys\030\001 \003(\0132\027.mynigma.syncPr"
    "ivateKey\022\'\n\007pubKeys\030\002 \003(\0132\026.mynigma.sync"
    "PublicKey\022+\n\010accounts\030\003 \003(\0132\031.mynigma.ac"
    "countLoginData\022(\n\010contacts\030\004 \003(\0132\026.mynig"
    "ma.contactDetail\0224\n\017keyExpectations\030\005 \003("
    "\0132\033.mynigma.syncKeyExpectation\"p\n\023device"
    "DiscoveryData\022\014\n\004UUID\030\001 \001(\t\022\014\n\004type\030\002 \001("
    "\t\022\014\n\004name\030\003 \001(\t\022\025\n\remailAdresses\030\004 \003(\t\022\030"
    "\n\020privateKeyLabels\030\005 \003(\t", 2624);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "syncData.proto", &protobuf_RegisterTypes);
  privateKey::default_instance_ = new privateKey();
  publicKey::default_instance_ = new publicKey();
  accountLoginData::default_instance_ = new accountLoginData();
  confidentialAccountData::default_instance_ = new confidentialAccountData();
  contactDetail::default_instance_ = new contactDetail();
  syncKeyExpectation::default_instance_ = new syncKeyExpectation();
  syncPrivateKey::default_instance_ = new syncPrivateKey();
  syncPublicKey::default_instance_ = new syncPublicKey();
  syncData::default_instance_ = new syncData();
  deviceDiscoveryData::default_instance_ = new deviceDiscoveryData();
  privateKey::default_instance_->InitAsDefaultInstance();
  publicKey::default_instance_->InitAsDefaultInstance();
  accountLoginData::default_instance_->InitAsDefaultInstance();
  confidentialAccountData::default_instance_->InitAsDefaultInstance();
  contactDetail::default_instance_->InitAsDefaultInstance();
  syncKeyExpectation::default_instance_->InitAsDefaultInstance();
  syncPrivateKey::default_instance_->InitAsDefaultInstance();
  syncPublicKey::default_instance_->InitAsDefaultInstance();
  syncData::default_instance_->InitAsDefaultInstance();
  deviceDiscoveryData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_syncData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_syncData_2eproto {
  StaticDescriptorInitializer_syncData_2eproto() {
    protobuf_AddDesc_syncData_2eproto();
  }
} static_descriptor_initializer_syncData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int privateKey::kEncrKeyDataFieldNumber;
const int privateKey::kVerKeyDataFieldNumber;
const int privateKey::kKeyLabelFieldNumber;
const int privateKey::kDateCreatedFieldNumber;
const int privateKey::kIsCompromisedFieldNumber;
const int privateKey::kVersionFieldNumber;
const int privateKey::kCurrentReceivedForEmailFieldNumber;
const int privateKey::kCurrentSentForEmailFieldNumber;
const int privateKey::kDecrKeyDataFieldNumber;
const int privateKey::kSignKeyDataFieldNumber;
const int privateKey::kEmailFieldNumber;
const int privateKey::kIsCurrentFieldNumber;
const int privateKey::kEmailAddressesFieldNumber;
#endif  // !_MSC_VER

privateKey::privateKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void privateKey::InitAsDefaultInstance() {
}

privateKey::privateKey(const privateKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void privateKey::SharedCtor() {
  _cached_size_ = 0;
  encrkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  keylabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datecreated_ = 0;
  iscompromised_ = false;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  decrkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iscurrent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

privateKey::~privateKey() {
  SharedDtor();
}

void privateKey::SharedDtor() {
  if (encrkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete encrkeydata_;
  }
  if (verkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete verkeydata_;
  }
  if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
    delete keylabel_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (decrkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete decrkeydata_;
  }
  if (signkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete signkeydata_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void privateKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* privateKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return privateKey_descriptor_;
}

const privateKey& privateKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_syncData_2eproto();
  return *default_instance_;
}

privateKey* privateKey::default_instance_ = NULL;

privateKey* privateKey::New() const {
  return new privateKey;
}

void privateKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_encrkeydata()) {
      if (encrkeydata_ != &::google::protobuf::internal::kEmptyString) {
        encrkeydata_->clear();
      }
    }
    if (has_verkeydata()) {
      if (verkeydata_ != &::google::protobuf::internal::kEmptyString) {
        verkeydata_->clear();
      }
    }
    if (has_keylabel()) {
      if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
        keylabel_->clear();
      }
    }
    datecreated_ = 0;
    iscompromised_ = false;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_decrkeydata()) {
      if (decrkeydata_ != &::google::protobuf::internal::kEmptyString) {
        decrkeydata_->clear();
      }
    }
    if (has_signkeydata()) {
      if (signkeydata_ != &::google::protobuf::internal::kEmptyString) {
        signkeydata_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    iscurrent_ = false;
  }
  currentreceivedforemail_.Clear();
  currentsentforemail_.Clear();
  emailaddresses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool privateKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes encrKeyData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_verKeyData;
        break;
      }

      // required bytes verKeyData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keyLabel;
        break;
      }

      // required string keyLabel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyLabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keylabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keylabel().data(), this->keylabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dateCreated;
        break;
      }

      // optional int32 dateCreated = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateCreated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datecreated_)));
          set_has_datecreated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isCompromised;
        break;
      }

      // optional bool isCompromised = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCompromised:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscompromised_)));
          set_has_iscompromised();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }

      // optional string version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_currentReceivedForEmail;
        break;
      }

      // repeated string currentReceivedForEmail = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentReceivedForEmail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_currentreceivedforemail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentreceivedforemail(this->currentreceivedforemail_size() - 1).data(),
            this->currentreceivedforemail(this->currentreceivedforemail_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_currentReceivedForEmail;
        if (input->ExpectTag(66)) goto parse_currentSentForEmail;
        break;
      }

      // repeated string currentSentForEmail = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentSentForEmail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_currentsentforemail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentsentforemail(this->currentsentforemail_size() - 1).data(),
            this->currentsentforemail(this->currentsentforemail_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_currentSentForEmail;
        if (input->ExpectTag(74)) goto parse_decrKeyData;
        break;
      }

      // optional bytes decrKeyData = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_decrKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_decrkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_signKeyData;
        break;
      }

      // optional bytes signKeyData = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_email;
        break;
      }

      // optional string email = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_isCurrent;
        break;
      }

      // optional bool isCurrent = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCurrent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscurrent_)));
          set_has_iscurrent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_emailAddresses;
        break;
      }

      // repeated string emailAddresses = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emailAddresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_emailaddresses()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->emailaddresses(this->emailaddresses_size() - 1).data(),
            this->emailaddresses(this->emailaddresses_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_emailAddresses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void privateKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes encrKeyData = 1;
  if (has_encrkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->encrkeydata(), output);
  }

  // required bytes verKeyData = 2;
  if (has_verkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->verkeydata(), output);
  }

  // required string keyLabel = 3;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keylabel(), output);
  }

  // optional int32 dateCreated = 4;
  if (has_datecreated()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->datecreated(), output);
  }

  // optional bool isCompromised = 5;
  if (has_iscompromised()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->iscompromised(), output);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->version(), output);
  }

  // repeated string currentReceivedForEmail = 7;
  for (int i = 0; i < this->currentreceivedforemail_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->currentreceivedforemail(i).data(), this->currentreceivedforemail(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->currentreceivedforemail(i), output);
  }

  // repeated string currentSentForEmail = 8;
  for (int i = 0; i < this->currentsentforemail_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->currentsentforemail(i).data(), this->currentsentforemail(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->currentsentforemail(i), output);
  }

  // optional bytes decrKeyData = 9;
  if (has_decrkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->decrkeydata(), output);
  }

  // optional bytes signKeyData = 10;
  if (has_signkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->signkeydata(), output);
  }

  // optional string email = 11;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->email(), output);
  }

  // optional bool isCurrent = 12;
  if (has_iscurrent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->iscurrent(), output);
  }

  // repeated string emailAddresses = 13;
  for (int i = 0; i < this->emailaddresses_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->emailaddresses(i).data(), this->emailaddresses(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->emailaddresses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* privateKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes encrKeyData = 1;
  if (has_encrkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->encrkeydata(), target);
  }

  // required bytes verKeyData = 2;
  if (has_verkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->verkeydata(), target);
  }

  // required string keyLabel = 3;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->keylabel(), target);
  }

  // optional int32 dateCreated = 4;
  if (has_datecreated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->datecreated(), target);
  }

  // optional bool isCompromised = 5;
  if (has_iscompromised()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->iscompromised(), target);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  // repeated string currentReceivedForEmail = 7;
  for (int i = 0; i < this->currentreceivedforemail_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentreceivedforemail(i).data(), this->currentreceivedforemail(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->currentreceivedforemail(i), target);
  }

  // repeated string currentSentForEmail = 8;
  for (int i = 0; i < this->currentsentforemail_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentsentforemail(i).data(), this->currentsentforemail(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->currentsentforemail(i), target);
  }

  // optional bytes decrKeyData = 9;
  if (has_decrkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->decrkeydata(), target);
  }

  // optional bytes signKeyData = 10;
  if (has_signkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->signkeydata(), target);
  }

  // optional string email = 11;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->email(), target);
  }

  // optional bool isCurrent = 12;
  if (has_iscurrent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->iscurrent(), target);
  }

  // repeated string emailAddresses = 13;
  for (int i = 0; i < this->emailaddresses_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emailaddresses(i).data(), this->emailaddresses(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->emailaddresses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int privateKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes encrKeyData = 1;
    if (has_encrkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrkeydata());
    }

    // required bytes verKeyData = 2;
    if (has_verkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->verkeydata());
    }

    // required string keyLabel = 3;
    if (has_keylabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keylabel());
    }

    // optional int32 dateCreated = 4;
    if (has_datecreated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datecreated());
    }

    // optional bool isCompromised = 5;
    if (has_iscompromised()) {
      total_size += 1 + 1;
    }

    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes decrKeyData = 9;
    if (has_decrkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->decrkeydata());
    }

    // optional bytes signKeyData = 10;
    if (has_signkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signkeydata());
    }

    // optional string email = 11;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional bool isCurrent = 12;
    if (has_iscurrent()) {
      total_size += 1 + 1;
    }

  }
  // repeated string currentReceivedForEmail = 7;
  total_size += 1 * this->currentreceivedforemail_size();
  for (int i = 0; i < this->currentreceivedforemail_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->currentreceivedforemail(i));
  }

  // repeated string currentSentForEmail = 8;
  total_size += 1 * this->currentsentforemail_size();
  for (int i = 0; i < this->currentsentforemail_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->currentsentforemail(i));
  }

  // repeated string emailAddresses = 13;
  total_size += 1 * this->emailaddresses_size();
  for (int i = 0; i < this->emailaddresses_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->emailaddresses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void privateKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const privateKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const privateKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void privateKey::MergeFrom(const privateKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  currentreceivedforemail_.MergeFrom(from.currentreceivedforemail_);
  currentsentforemail_.MergeFrom(from.currentsentforemail_);
  emailaddresses_.MergeFrom(from.emailaddresses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encrkeydata()) {
      set_encrkeydata(from.encrkeydata());
    }
    if (from.has_verkeydata()) {
      set_verkeydata(from.verkeydata());
    }
    if (from.has_keylabel()) {
      set_keylabel(from.keylabel());
    }
    if (from.has_datecreated()) {
      set_datecreated(from.datecreated());
    }
    if (from.has_iscompromised()) {
      set_iscompromised(from.iscompromised());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_decrkeydata()) {
      set_decrkeydata(from.decrkeydata());
    }
    if (from.has_signkeydata()) {
      set_signkeydata(from.signkeydata());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_iscurrent()) {
      set_iscurrent(from.iscurrent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void privateKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void privateKey::CopyFrom(const privateKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool privateKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void privateKey::Swap(privateKey* other) {
  if (other != this) {
    std::swap(encrkeydata_, other->encrkeydata_);
    std::swap(verkeydata_, other->verkeydata_);
    std::swap(keylabel_, other->keylabel_);
    std::swap(datecreated_, other->datecreated_);
    std::swap(iscompromised_, other->iscompromised_);
    std::swap(version_, other->version_);
    currentreceivedforemail_.Swap(&other->currentreceivedforemail_);
    currentsentforemail_.Swap(&other->currentsentforemail_);
    std::swap(decrkeydata_, other->decrkeydata_);
    std::swap(signkeydata_, other->signkeydata_);
    std::swap(email_, other->email_);
    std::swap(iscurrent_, other->iscurrent_);
    emailaddresses_.Swap(&other->emailaddresses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata privateKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = privateKey_descriptor_;
  metadata.reflection = privateKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int publicKey::kEncrKeyDataFieldNumber;
const int publicKey::kVerKeyDataFieldNumber;
const int publicKey::kKeyLabelFieldNumber;
const int publicKey::kDateCreatedFieldNumber;
const int publicKey::kCompromisedFieldNumber;
const int publicKey::kVersionFieldNumber;
const int publicKey::kCurrentKeyForEmailFieldNumber;
const int publicKey::kDateObtainedFieldNumber;
const int publicKey::kDateDeclaredFieldNumber;
const int publicKey::kIsCompromisedFieldNumber;
const int publicKey::kFromServerFieldNumber;
const int publicKey::kIntroducesKeysFieldNumber;
const int publicKey::kIsIntroducedByKeysFieldNumber;
const int publicKey::kEmailFieldNumber;
const int publicKey::kIsCurrentFieldNumber;
#endif  // !_MSC_VER

publicKey::publicKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void publicKey::InitAsDefaultInstance() {
}

publicKey::publicKey(const publicKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void publicKey::SharedCtor() {
  _cached_size_ = 0;
  encrkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  keylabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datecreated_ = 0;
  compromised_ = false;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dateobtained_ = 0;
  datedeclared_ = 0;
  iscompromised_ = false;
  fromserver_ = false;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iscurrent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

publicKey::~publicKey() {
  SharedDtor();
}

void publicKey::SharedDtor() {
  if (encrkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete encrkeydata_;
  }
  if (verkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete verkeydata_;
  }
  if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
    delete keylabel_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void publicKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* publicKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return publicKey_descriptor_;
}

const publicKey& publicKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_syncData_2eproto();
  return *default_instance_;
}

publicKey* publicKey::default_instance_ = NULL;

publicKey* publicKey::New() const {
  return new publicKey;
}

void publicKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_encrkeydata()) {
      if (encrkeydata_ != &::google::protobuf::internal::kEmptyString) {
        encrkeydata_->clear();
      }
    }
    if (has_verkeydata()) {
      if (verkeydata_ != &::google::protobuf::internal::kEmptyString) {
        verkeydata_->clear();
      }
    }
    if (has_keylabel()) {
      if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
        keylabel_->clear();
      }
    }
    datecreated_ = 0;
    compromised_ = false;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    dateobtained_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    datedeclared_ = 0;
    iscompromised_ = false;
    fromserver_ = false;
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    iscurrent_ = false;
  }
  currentkeyforemail_.Clear();
  introduceskeys_.Clear();
  isintroducedbykeys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool publicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes encrKeyData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_verKeyData;
        break;
      }

      // required bytes verKeyData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keyLabel;
        break;
      }

      // required string keyLabel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyLabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keylabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keylabel().data(), this->keylabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dateCreated;
        break;
      }

      // optional int32 dateCreated = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateCreated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datecreated_)));
          set_has_datecreated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_compromised;
        break;
      }

      // optional bool compromised = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compromised:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compromised_)));
          set_has_compromised();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }

      // optional string version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_currentKeyForEmail;
        break;
      }

      // repeated string currentKeyForEmail = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentKeyForEmail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_currentkeyforemail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentkeyforemail(this->currentkeyforemail_size() - 1).data(),
            this->currentkeyforemail(this->currentkeyforemail_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_currentKeyForEmail;
        if (input->ExpectTag(64)) goto parse_dateObtained;
        break;
      }

      // optional int32 dateObtained = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateObtained:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dateobtained_)));
          set_has_dateobtained();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dateDeclared;
        break;
      }

      // optional int32 dateDeclared = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateDeclared:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datedeclared_)));
          set_has_datedeclared();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isCompromised;
        break;
      }

      // optional bool isCompromised = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCompromised:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscompromised_)));
          set_has_iscompromised();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fromServer;
        break;
      }

      // optional bool fromServer = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromServer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromserver_)));
          set_has_fromserver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_introducesKeys;
        break;
      }

      // repeated string introducesKeys = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_introducesKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_introduceskeys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->introduceskeys(this->introduceskeys_size() - 1).data(),
            this->introduceskeys(this->introduceskeys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_introducesKeys;
        if (input->ExpectTag(106)) goto parse_isIntroducedByKeys;
        break;
      }

      // repeated string isIntroducedByKeys = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isIntroducedByKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_isintroducedbykeys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isintroducedbykeys(this->isintroducedbykeys_size() - 1).data(),
            this->isintroducedbykeys(this->isintroducedbykeys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_isIntroducedByKeys;
        if (input->ExpectTag(114)) goto parse_email;
        break;
      }

      // optional string email = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_isCurrent;
        break;
      }

      // optional bool isCurrent = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCurrent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscurrent_)));
          set_has_iscurrent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void publicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes encrKeyData = 1;
  if (has_encrkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->encrkeydata(), output);
  }

  // required bytes verKeyData = 2;
  if (has_verkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->verkeydata(), output);
  }

  // required string keyLabel = 3;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keylabel(), output);
  }

  // optional int32 dateCreated = 4;
  if (has_datecreated()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->datecreated(), output);
  }

  // optional bool compromised = 5;
  if (has_compromised()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->compromised(), output);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->version(), output);
  }

  // repeated string currentKeyForEmail = 7;
  for (int i = 0; i < this->currentkeyforemail_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->currentkeyforemail(i).data(), this->currentkeyforemail(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->currentkeyforemail(i), output);
  }

  // optional int32 dateObtained = 8;
  if (has_dateobtained()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dateobtained(), output);
  }

  // optional int32 dateDeclared = 9;
  if (has_datedeclared()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->datedeclared(), output);
  }

  // optional bool isCompromised = 10;
  if (has_iscompromised()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->iscompromised(), output);
  }

  // optional bool fromServer = 11;
  if (has_fromserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->fromserver(), output);
  }

  // repeated string introducesKeys = 12;
  for (int i = 0; i < this->introduceskeys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->introduceskeys(i).data(), this->introduceskeys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->introduceskeys(i), output);
  }

  // repeated string isIntroducedByKeys = 13;
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->isintroducedbykeys(i).data(), this->isintroducedbykeys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->isintroducedbykeys(i), output);
  }

  // optional string email = 14;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->email(), output);
  }

  // optional bool isCurrent = 15;
  if (has_iscurrent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->iscurrent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* publicKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes encrKeyData = 1;
  if (has_encrkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->encrkeydata(), target);
  }

  // required bytes verKeyData = 2;
  if (has_verkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->verkeydata(), target);
  }

  // required string keyLabel = 3;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->keylabel(), target);
  }

  // optional int32 dateCreated = 4;
  if (has_datecreated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->datecreated(), target);
  }

  // optional bool compromised = 5;
  if (has_compromised()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->compromised(), target);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  // repeated string currentKeyForEmail = 7;
  for (int i = 0; i < this->currentkeyforemail_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentkeyforemail(i).data(), this->currentkeyforemail(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->currentkeyforemail(i), target);
  }

  // optional int32 dateObtained = 8;
  if (has_dateobtained()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dateobtained(), target);
  }

  // optional int32 dateDeclared = 9;
  if (has_datedeclared()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->datedeclared(), target);
  }

  // optional bool isCompromised = 10;
  if (has_iscompromised()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->iscompromised(), target);
  }

  // optional bool fromServer = 11;
  if (has_fromserver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->fromserver(), target);
  }

  // repeated string introducesKeys = 12;
  for (int i = 0; i < this->introduceskeys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->introduceskeys(i).data(), this->introduceskeys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->introduceskeys(i), target);
  }

  // repeated string isIntroducedByKeys = 13;
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isintroducedbykeys(i).data(), this->isintroducedbykeys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->isintroducedbykeys(i), target);
  }

  // optional string email = 14;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->email(), target);
  }

  // optional bool isCurrent = 15;
  if (has_iscurrent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->iscurrent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int publicKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes encrKeyData = 1;
    if (has_encrkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrkeydata());
    }

    // required bytes verKeyData = 2;
    if (has_verkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->verkeydata());
    }

    // required string keyLabel = 3;
    if (has_keylabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keylabel());
    }

    // optional int32 dateCreated = 4;
    if (has_datecreated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datecreated());
    }

    // optional bool compromised = 5;
    if (has_compromised()) {
      total_size += 1 + 1;
    }

    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 dateObtained = 8;
    if (has_dateobtained()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dateobtained());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 dateDeclared = 9;
    if (has_datedeclared()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datedeclared());
    }

    // optional bool isCompromised = 10;
    if (has_iscompromised()) {
      total_size += 1 + 1;
    }

    // optional bool fromServer = 11;
    if (has_fromserver()) {
      total_size += 1 + 1;
    }

    // optional string email = 14;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional bool isCurrent = 15;
    if (has_iscurrent()) {
      total_size += 1 + 1;
    }

  }
  // repeated string currentKeyForEmail = 7;
  total_size += 1 * this->currentkeyforemail_size();
  for (int i = 0; i < this->currentkeyforemail_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->currentkeyforemail(i));
  }

  // repeated string introducesKeys = 12;
  total_size += 1 * this->introduceskeys_size();
  for (int i = 0; i < this->introduceskeys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->introduceskeys(i));
  }

  // repeated string isIntroducedByKeys = 13;
  total_size += 1 * this->isintroducedbykeys_size();
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->isintroducedbykeys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void publicKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const publicKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const publicKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void publicKey::MergeFrom(const publicKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  currentkeyforemail_.MergeFrom(from.currentkeyforemail_);
  introduceskeys_.MergeFrom(from.introduceskeys_);
  isintroducedbykeys_.MergeFrom(from.isintroducedbykeys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encrkeydata()) {
      set_encrkeydata(from.encrkeydata());
    }
    if (from.has_verkeydata()) {
      set_verkeydata(from.verkeydata());
    }
    if (from.has_keylabel()) {
      set_keylabel(from.keylabel());
    }
    if (from.has_datecreated()) {
      set_datecreated(from.datecreated());
    }
    if (from.has_compromised()) {
      set_compromised(from.compromised());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_dateobtained()) {
      set_dateobtained(from.dateobtained());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_datedeclared()) {
      set_datedeclared(from.datedeclared());
    }
    if (from.has_iscompromised()) {
      set_iscompromised(from.iscompromised());
    }
    if (from.has_fromserver()) {
      set_fromserver(from.fromserver());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_iscurrent()) {
      set_iscurrent(from.iscurrent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void publicKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void publicKey::CopyFrom(const publicKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool publicKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void publicKey::Swap(publicKey* other) {
  if (other != this) {
    std::swap(encrkeydata_, other->encrkeydata_);
    std::swap(verkeydata_, other->verkeydata_);
    std::swap(keylabel_, other->keylabel_);
    std::swap(datecreated_, other->datecreated_);
    std::swap(compromised_, other->compromised_);
    std::swap(version_, other->version_);
    currentkeyforemail_.Swap(&other->currentkeyforemail_);
    std::swap(dateobtained_, other->dateobtained_);
    std::swap(datedeclared_, other->datedeclared_);
    std::swap(iscompromised_, other->iscompromised_);
    std::swap(fromserver_, other->fromserver_);
    introduceskeys_.Swap(&other->introduceskeys_);
    isintroducedbykeys_.Swap(&other->isintroducedbykeys_);
    std::swap(email_, other->email_);
    std::swap(iscurrent_, other->iscurrent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata publicKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = publicKey_descriptor_;
  metadata.reflection = publicKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int accountLoginData::kInHostnameFieldNumber;
const int accountLoginData::kOutHostnameFieldNumber;
const int accountLoginData::kInUserNameFieldNumber;
const int accountLoginData::kOutUserNameFieldNumber;
const int accountLoginData::kInPasswordFieldNumber;
const int accountLoginData::kOutPasswordFieldNumber;
const int accountLoginData::kInPortFieldNumber;
const int accountLoginData::kOutPortFieldNumber;
const int accountLoginData::kInEncryptionFieldNumber;
const int accountLoginData::kOutEncryptionFieldNumber;
const int accountLoginData::kInAuthTypeFieldNumber;
const int accountLoginData::kOutAuthTypeFieldNumber;
const int accountLoginData::kEmailFieldNumber;
const int accountLoginData::kSenderNameFieldNumber;
const int accountLoginData::kSenderEmailFieldNumber;
const int accountLoginData::kDisplayNameFieldNumber;
const int accountLoginData::kCopyIntoSentFieldNumber;
#endif  // !_MSC_VER

accountLoginData::accountLoginData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void accountLoginData::InitAsDefaultInstance() {
}

accountLoginData::accountLoginData(const accountLoginData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void accountLoginData::SharedCtor() {
  _cached_size_ = 0;
  inhostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  outhostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  outusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  outpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inport_ = 0;
  outport_ = 0;
  inencryption_ = 0;
  outencryption_ = 0;
  inauthtype_ = 0;
  outauthtype_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  senderemail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  copyintosent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

accountLoginData::~accountLoginData() {
  SharedDtor();
}

void accountLoginData::SharedDtor() {
  if (inhostname_ != &::google::protobuf::internal::kEmptyString) {
    delete inhostname_;
  }
  if (outhostname_ != &::google::protobuf::internal::kEmptyString) {
    delete outhostname_;
  }
  if (inusername_ != &::google::protobuf::internal::kEmptyString) {
    delete inusername_;
  }
  if (outusername_ != &::google::protobuf::internal::kEmptyString) {
    delete outusername_;
  }
  if (inpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete inpassword_;
  }
  if (outpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete outpassword_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (senderemail_ != &::google::protobuf::internal::kEmptyString) {
    delete senderemail_;
  }
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    delete displayname_;
  }
  if (this != default_instance_) {
  }
}

void accountLoginData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* accountLoginData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return accountLoginData_descriptor_;
}

const accountLoginData& accountLoginData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_syncData_2eproto();
  return *default_instance_;
}

accountLoginData* accountLoginData::default_instance_ = NULL;

accountLoginData* accountLoginData::New() const {
  return new accountLoginData;
}

void accountLoginData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_inhostname()) {
      if (inhostname_ != &::google::protobuf::internal::kEmptyString) {
        inhostname_->clear();
      }
    }
    if (has_outhostname()) {
      if (outhostname_ != &::google::protobuf::internal::kEmptyString) {
        outhostname_->clear();
      }
    }
    if (has_inusername()) {
      if (inusername_ != &::google::protobuf::internal::kEmptyString) {
        inusername_->clear();
      }
    }
    if (has_outusername()) {
      if (outusername_ != &::google::protobuf::internal::kEmptyString) {
        outusername_->clear();
      }
    }
    if (has_inpassword()) {
      if (inpassword_ != &::google::protobuf::internal::kEmptyString) {
        inpassword_->clear();
      }
    }
    if (has_outpassword()) {
      if (outpassword_ != &::google::protobuf::internal::kEmptyString) {
        outpassword_->clear();
      }
    }
    inport_ = 0;
    outport_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    inencryption_ = 0;
    outencryption_ = 0;
    inauthtype_ = 0;
    outauthtype_ = 0;
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::kEmptyString) {
        sendername_->clear();
      }
    }
    if (has_senderemail()) {
      if (senderemail_ != &::google::protobuf::internal::kEmptyString) {
        senderemail_->clear();
      }
    }
    if (has_displayname()) {
      if (displayname_ != &::google::protobuf::internal::kEmptyString) {
        displayname_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    copyintosent_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool accountLoginData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string inHostname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inhostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inhostname().data(), this->inhostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_outHostname;
        break;
      }

      // required string outHostname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outHostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outhostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->outhostname().data(), this->outhostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_inUserName;
        break;
      }

      // required string inUserName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inUserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inusername().data(), this->inusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_outUserName;
        break;
      }

      // required string outUserName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outUserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outusername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->outusername().data(), this->outusername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_inPassword;
        break;
      }

      // required string inPassword = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inpassword().data(), this->inpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_outPassword;
        break;
      }

      // required string outPassword = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->outpassword().data(), this->outpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_inPort;
        break;
      }

      // required int32 inPort = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inport_)));
          set_has_inport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_outPort;
        break;
      }

      // required int32 outPort = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outport_)));
          set_has_outport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_inEncryption;
        break;
      }

      // required int32 inEncryption = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inEncryption:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inencryption_)));
          set_has_inencryption();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_outEncryption;
        break;
      }

      // required int32 outEncryption = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outEncryption:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outencryption_)));
          set_has_outencryption();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_inAuthType;
        break;
      }

      // required int32 inAuthType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inAuthType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inauthtype_)));
          set_has_inauthtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_outAuthType;
        break;
      }

      // required int32 outAuthType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outAuthType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outauthtype_)));
          set_has_outauthtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_email;
        break;
      }

      // required string email = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_senderName;
        break;
      }

      // optional string senderName = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_senderEmail;
        break;
      }

      // optional string senderEmail = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderEmail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderemail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->senderemail().data(), this->senderemail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_displayName;
        break;
      }

      // optional string displayName = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_displayName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->displayname().data(), this->displayname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_copyIntoSent;
        break;
      }

      // optional bool copyIntoSent = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copyIntoSent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &copyintosent_)));
          set_has_copyintosent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void accountLoginData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string inHostname = 1;
  if (has_inhostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inhostname().data(), this->inhostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->inhostname(), output);
  }

  // required string outHostname = 2;
  if (has_outhostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outhostname().data(), this->outhostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->outhostname(), output);
  }

  // required string inUserName = 3;
  if (has_inusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inusername().data(), this->inusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->inusername(), output);
  }

  // required string outUserName = 4;
  if (has_outusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outusername().data(), this->outusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->outusername(), output);
  }

  // required string inPassword = 5;
  if (has_inpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inpassword().data(), this->inpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->inpassword(), output);
  }

  // required string outPassword = 6;
  if (has_outpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outpassword().data(), this->outpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->outpassword(), output);
  }

  // required int32 inPort = 7;
  if (has_inport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->inport(), output);
  }

  // required int32 outPort = 8;
  if (has_outport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->outport(), output);
  }

  // required int32 inEncryption = 9;
  if (has_inencryption()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->inencryption(), output);
  }

  // required int32 outEncryption = 10;
  if (has_outencryption()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->outencryption(), output);
  }

  // required int32 inAuthType = 11;
  if (has_inauthtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->inauthtype(), output);
  }

  // required int32 outAuthType = 12;
  if (has_outauthtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->outauthtype(), output);
  }

  // required string email = 13;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->email(), output);
  }

  // optional string senderName = 14;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->sendername(), output);
  }

  // optional string senderEmail = 15;
  if (has_senderemail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->senderemail().data(), this->senderemail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->senderemail(), output);
  }

  // optional string displayName = 16;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->displayname(), output);
  }

  // optional bool copyIntoSent = 17;
  if (has_copyintosent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->copyintosent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* accountLoginData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string inHostname = 1;
  if (has_inhostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inhostname().data(), this->inhostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->inhostname(), target);
  }

  // required string outHostname = 2;
  if (has_outhostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outhostname().data(), this->outhostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->outhostname(), target);
  }

  // required string inUserName = 3;
  if (has_inusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inusername().data(), this->inusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->inusername(), target);
  }

  // required string outUserName = 4;
  if (has_outusername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outusername().data(), this->outusername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->outusername(), target);
  }

  // required string inPassword = 5;
  if (has_inpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inpassword().data(), this->inpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->inpassword(), target);
  }

  // required string outPassword = 6;
  if (has_outpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outpassword().data(), this->outpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->outpassword(), target);
  }

  // required int32 inPort = 7;
  if (has_inport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->inport(), target);
  }

  // required int32 outPort = 8;
  if (has_outport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->outport(), target);
  }

  // required int32 inEncryption = 9;
  if (has_inencryption()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->inencryption(), target);
  }

  // required int32 outEncryption = 10;
  if (has_outencryption()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->outencryption(), target);
  }

  // required int32 inAuthType = 11;
  if (has_inauthtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->inauthtype(), target);
  }

  // required int32 outAuthType = 12;
  if (has_outauthtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->outauthtype(), target);
  }

  // required string email = 13;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->email(), target);
  }

  // optional string senderName = 14;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->sendername(), target);
  }

  // optional string senderEmail = 15;
  if (has_senderemail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->senderemail().data(), this->senderemail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->senderemail(), target);
  }

  // optional string displayName = 16;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->displayname(), target);
  }

  // optional bool copyIntoSent = 17;
  if (has_copyintosent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->copyintosent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int accountLoginData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string inHostname = 1;
    if (has_inhostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inhostname());
    }

    // required string outHostname = 2;
    if (has_outhostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outhostname());
    }

    // required string inUserName = 3;
    if (has_inusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inusername());
    }

    // required string outUserName = 4;
    if (has_outusername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outusername());
    }

    // required string inPassword = 5;
    if (has_inpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inpassword());
    }

    // required string outPassword = 6;
    if (has_outpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outpassword());
    }

    // required int32 inPort = 7;
    if (has_inport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inport());
    }

    // required int32 outPort = 8;
    if (has_outport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outport());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 inEncryption = 9;
    if (has_inencryption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inencryption());
    }

    // required int32 outEncryption = 10;
    if (has_outencryption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outencryption());
    }

    // required int32 inAuthType = 11;
    if (has_inauthtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inauthtype());
    }

    // required int32 outAuthType = 12;
    if (has_outauthtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outauthtype());
    }

    // required string email = 13;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string senderName = 14;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

    // optional string senderEmail = 15;
    if (has_senderemail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->senderemail());
    }

    // optional string displayName = 16;
    if (has_displayname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayname());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool copyIntoSent = 17;
    if (has_copyintosent()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void accountLoginData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const accountLoginData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const accountLoginData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void accountLoginData::MergeFrom(const accountLoginData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inhostname()) {
      set_inhostname(from.inhostname());
    }
    if (from.has_outhostname()) {
      set_outhostname(from.outhostname());
    }
    if (from.has_inusername()) {
      set_inusername(from.inusername());
    }
    if (from.has_outusername()) {
      set_outusername(from.outusername());
    }
    if (from.has_inpassword()) {
      set_inpassword(from.inpassword());
    }
    if (from.has_outpassword()) {
      set_outpassword(from.outpassword());
    }
    if (from.has_inport()) {
      set_inport(from.inport());
    }
    if (from.has_outport()) {
      set_outport(from.outport());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_inencryption()) {
      set_inencryption(from.inencryption());
    }
    if (from.has_outencryption()) {
      set_outencryption(from.outencryption());
    }
    if (from.has_inauthtype()) {
      set_inauthtype(from.inauthtype());
    }
    if (from.has_outauthtype()) {
      set_outauthtype(from.outauthtype());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
    if (from.has_senderemail()) {
      set_senderemail(from.senderemail());
    }
    if (from.has_displayname()) {
      set_displayname(from.displayname());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_copyintosent()) {
      set_copyintosent(from.copyintosent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void accountLoginData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void accountLoginData::CopyFrom(const accountLoginData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool accountLoginData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void accountLoginData::Swap(accountLoginData* other) {
  if (other != this) {
    std::swap(inhostname_, other->inhostname_);
    std::swap(outhostname_, other->outhostname_);
    std::swap(inusername_, other->inusername_);
    std::swap(outusername_, other->outusername_);
    std::swap(inpassword_, other->inpassword_);
    std::swap(outpassword_, other->outpassword_);
    std::swap(inport_, other->inport_);
    std::swap(outport_, other->outport_);
    std::swap(inencryption_, other->inencryption_);
    std::swap(outencryption_, other->outencryption_);
    std::swap(inauthtype_, other->inauthtype_);
    std::swap(outauthtype_, other->outauthtype_);
    std::swap(email_, other->email_);
    std::swap(sendername_, other->sendername_);
    std::swap(senderemail_, other->senderemail_);
    std::swap(displayname_, other->displayname_);
    std::swap(copyintosent_, other->copyintosent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata accountLoginData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = accountLoginData_descriptor_;
  metadata.reflection = accountLoginData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int confidentialAccountData::kPrivKeysFieldNumber;
const int confidentialAccountData::kPubKeysFieldNumber;
const int confidentialAccountData::kAccountsFieldNumber;
const int confidentialAccountData::kVersionFieldNumber;
#endif  // !_MSC_VER

confidentialAccountData::confidentialAccountData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void confidentialAccountData::InitAsDefaultInstance() {
}

confidentialAccountData::confidentialAccountData(const confidentialAccountData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void confidentialAccountData::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

confidentialAccountData::~confidentialAccountData() {
  SharedDtor();
}

void confidentialAccountData::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void confidentialAccountData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* confidentialAccountData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return confidentialAccountData_descriptor_;
}

const confidentialAccountData& confidentialAccountData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_syncData_2eproto();
  return *default_instance_;
}

confidentialAccountData* confidentialAccountData::default_instance_ = NULL;

confidentialAccountData* confidentialAccountData::New() const {
  return new confidentialAccountData;
}

void confidentialAccountData::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  privkeys_.Clear();
  pubkeys_.Clear();
  accounts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool confidentialAccountData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mynigma.privateKey privKeys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_privKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_privkeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_privKeys;
        if (input->ExpectTag(18)) goto parse_pubKeys;
        break;
      }

      // repeated .mynigma.publicKey pubKeys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pubKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pubkeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pubKeys;
        if (input->ExpectTag(26)) goto parse_accounts;
        break;
      }

      // repeated .mynigma.accountLoginData accounts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accounts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accounts;
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }

      // optional string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void confidentialAccountData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mynigma.privateKey privKeys = 1;
  for (int i = 0; i < this->privkeys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->privkeys(i), output);
  }

  // repeated .mynigma.publicKey pubKeys = 2;
  for (int i = 0; i < this->pubkeys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pubkeys(i), output);
  }

  // repeated .mynigma.accountLoginData accounts = 3;
  for (int i = 0; i < this->accounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->accounts(i), output);
  }

  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* confidentialAccountData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mynigma.privateKey privKeys = 1;
  for (int i = 0; i < this->privkeys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->privkeys(i), target);
  }

  // repeated .mynigma.publicKey pubKeys = 2;
  for (int i = 0; i < this->pubkeys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pubkeys(i), target);
  }

  // repeated .mynigma.accountLoginData accounts = 3;
  for (int i = 0; i < this->accounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->accounts(i), target);
  }

  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int confidentialAccountData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  // repeated .mynigma.privateKey privKeys = 1;
  total_size += 1 * this->privkeys_size();
  for (int i = 0; i < this->privkeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->privkeys(i));
  }

  // repeated .mynigma.publicKey pubKeys = 2;
  total_size += 1 * this->pubkeys_size();
  for (int i = 0; i < this->pubkeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pubkeys(i));
  }

  // repeated .mynigma.accountLoginData accounts = 3;
  total_size += 1 * this->accounts_size();
  for (int i = 0; i < this->accounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accounts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void confidentialAccountData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const confidentialAccountData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const confidentialAccountData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void confidentialAccountData::MergeFrom(const confidentialAccountData& from) {
  GOOGLE_CHECK_NE(&from, this);
  privkeys_.MergeFrom(from.privkeys_);
  pubkeys_.MergeFrom(from.pubkeys_);
  accounts_.MergeFrom(from.accounts_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void confidentialAccountData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void confidentialAccountData::CopyFrom(const confidentialAccountData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool confidentialAccountData::IsInitialized() const {

  for (int i = 0; i < privkeys_size(); i++) {
    if (!this->privkeys(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pubkeys_size(); i++) {
    if (!this->pubkeys(i).IsInitialized()) return false;
  }
  for (int i = 0; i < accounts_size(); i++) {
    if (!this->accounts(i).IsInitialized()) return false;
  }
  return true;
}

void confidentialAccountData::Swap(confidentialAccountData* other) {
  if (other != this) {
    privkeys_.Swap(&other->privkeys_);
    pubkeys_.Swap(&other->pubkeys_);
    accounts_.Swap(&other->accounts_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata confidentialAccountData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = confidentialAccountData_descriptor_;
  metadata.reflection = confidentialAccountData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int contactDetail::kFirstNameFieldNumber;
const int contactDetail::kLastNameFieldNumber;
const int contactDetail::kEmailAddressFieldNumber;
const int contactDetail::kCurrentSentKeyFieldNumber;
const int contactDetail::kDateSentKeyFieldNumber;
const int contactDetail::kCurrentReceivedKeyFieldNumber;
const int contactDetail::kDateReceivedKeyFieldNumber;
const int contactDetail::kNumberOfTimesContactedFieldNumber;
const int contactDetail::kLastCheckedWithServerFieldNumber;
const int contactDetail::kFullNameFieldNumber;
const int contactDetail::kLastInfoChangeFieldNumber;
#endif  // !_MSC_VER

contactDetail::contactDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void contactDetail::InitAsDefaultInstance() {
}

contactDetail::contactDetail(const contactDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void contactDetail::SharedCtor() {
  _cached_size_ = 0;
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  emailaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currentsentkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datesentkey_ = 0;
  currentreceivedkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datereceivedkey_ = 0;
  numberoftimescontacted_ = 0;
  lastcheckedwithserver_ = 0;
  fullname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastinfochange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

contactDetail::~contactDetail() {
  SharedDtor();
}

void contactDetail::SharedDtor() {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    delete firstname_;
  }
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    delete lastname_;
  }
  if (emailaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete emailaddress_;
  }
  if (currentsentkey_ != &::google::protobuf::internal::kEmptyString) {
    delete currentsentkey_;
  }
  if (currentreceivedkey_ != &::google::protobuf::internal::kEmptyString) {
    delete currentreceivedkey_;
  }
  if (fullname_ != &::google::protobuf::internal::kEmptyString) {
    delete fullname_;
  }
  if (this != default_instance_) {
  }
}

void contactDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* contactDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return contactDetail_descriptor_;
}

const contactDetail& contactDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_syncData_2eproto();
  return *default_instance_;
}

contactDetail* contactDetail::default_instance_ = NULL;

contactDetail* contactDetail::New() const {
  return new contactDetail;
}

void contactDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::kEmptyString) {
        firstname_->clear();
      }
    }
    if (has_lastname()) {
      if (lastname_ != &::google::protobuf::internal::kEmptyString) {
        lastname_->clear();
      }
    }
    if (has_emailaddress()) {
      if (emailaddress_ != &::google::protobuf::internal::kEmptyString) {
        emailaddress_->clear();
      }
    }
    if (has_currentsentkey()) {
      if (currentsentkey_ != &::google::protobuf::internal::kEmptyString) {
        currentsentkey_->clear();
      }
    }
    datesentkey_ = 0;
    if (has_currentreceivedkey()) {
      if (currentreceivedkey_ != &::google::protobuf::internal::kEmptyString) {
        currentreceivedkey_->clear();
      }
    }
    datereceivedkey_ = 0;
    numberoftimescontacted_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lastcheckedwithserver_ = 0;
    if (has_fullname()) {
      if (fullname_ != &::google::protobuf::internal::kEmptyString) {
        fullname_->clear();
      }
    }
    lastinfochange_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool contactDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string firstName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lastName;
        break;
      }

      // optional string lastName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_emailAddress;
        break;
      }

      // optional string emailAddress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emailAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emailaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->emailaddress().data(), this->emailaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_currentSentKey;
        break;
      }

      // optional string currentSentKey = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentSentKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currentsentkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentsentkey().data(), this->currentsentkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dateSentKey;
        break;
      }

      // optional int32 dateSentKey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateSentKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datesentkey_)));
          set_has_datesentkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_currentReceivedKey;
        break;
      }

      // optional string currentReceivedKey = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentReceivedKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currentreceivedkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentreceivedkey().data(), this->currentreceivedkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dateReceivedKey;
        break;
      }

      // optional int32 dateReceivedKey = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateReceivedKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datereceivedkey_)));
          set_has_datereceivedkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_numberOfTimesContacted;
        break;
      }

      // optional int32 numberOfTimesContacted = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numberOfTimesContacted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberoftimescontacted_)));
          set_has_numberoftimescontacted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lastCheckedWithServer;
        break;
      }

      // optional int32 lastCheckedWithServer = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastCheckedWithServer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastcheckedwithserver_)));
          set_has_lastcheckedwithserver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_fullName;
        break;
      }

      // optional string fullName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fullName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fullname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fullname().data(), this->fullname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lastInfoChange;
        break;
      }

      // optional int32 lastInfoChange = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastInfoChange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastinfochange_)));
          set_has_lastinfochange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void contactDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string firstName = 1;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->firstname(), output);
  }

  // optional string lastName = 2;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lastname(), output);
  }

  // optional string emailAddress = 3;
  if (has_emailaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emailaddress().data(), this->emailaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->emailaddress(), output);
  }

  // optional string currentSentKey = 4;
  if (has_currentsentkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentsentkey().data(), this->currentsentkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->currentsentkey(), output);
  }

  // optional int32 dateSentKey = 5;
  if (has_datesentkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->datesentkey(), output);
  }

  // optional string currentReceivedKey = 6;
  if (has_currentreceivedkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentreceivedkey().data(), this->currentreceivedkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->currentreceivedkey(), output);
  }

  // optional int32 dateReceivedKey = 7;
  if (has_datereceivedkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->datereceivedkey(), output);
  }

  // optional int32 numberOfTimesContacted = 8;
  if (has_numberoftimescontacted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->numberoftimescontacted(), output);
  }

  // optional int32 lastCheckedWithServer = 9;
  if (has_lastcheckedwithserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lastcheckedwithserver(), output);
  }

  // optional string fullName = 10;
  if (has_fullname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fullname().data(), this->fullname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->fullname(), output);
  }

  // optional int32 lastInfoChange = 11;
  if (has_lastinfochange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lastinfochange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* contactDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string firstName = 1;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->firstname(), target);
  }

  // optional string lastName = 2;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lastname(), target);
  }

  // optional string emailAddress = 3;
  if (has_emailaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emailaddress().data(), this->emailaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->emailaddress(), target);
  }

  // optional string currentSentKey = 4;
  if (has_currentsentkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentsentkey().data(), this->currentsentkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->currentsentkey(), target);
  }

  // optional int32 dateSentKey = 5;
  if (has_datesentkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->datesentkey(), target);
  }

  // optional string currentReceivedKey = 6;
  if (has_currentreceivedkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentreceivedkey().data(), this->currentreceivedkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->currentreceivedkey(), target);
  }

  // optional int32 dateReceivedKey = 7;
  if (has_datereceivedkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->datereceivedkey(), target);
  }

  // optional int32 numberOfTimesContacted = 8;
  if (has_numberoftimescontacted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->numberoftimescontacted(), target);
  }

  // optional int32 lastCheckedWithServer = 9;
  if (has_lastcheckedwithserver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lastcheckedwithserver(), target);
  }

  // optional string fullName = 10;
  if (has_fullname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fullname().data(), this->fullname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fullname(), target);
  }

  // optional int32 lastInfoChange = 11;
  if (has_lastinfochange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lastinfochange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int contactDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string firstName = 1;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstname());
    }

    // optional string lastName = 2;
    if (has_lastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastname());
    }

    // optional string emailAddress = 3;
    if (has_emailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->emailaddress());
    }

    // optional string currentSentKey = 4;
    if (has_currentsentkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currentsentkey());
    }

    // optional int32 dateSentKey = 5;
    if (has_datesentkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datesentkey());
    }

    // optional string currentReceivedKey = 6;
    if (has_currentreceivedkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currentreceivedkey());
    }

    // optional int32 dateReceivedKey = 7;
    if (has_datereceivedkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datereceivedkey());
    }

    // optional int32 numberOfTimesContacted = 8;
    if (has_numberoftimescontacted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberoftimescontacted());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 lastCheckedWithServer = 9;
    if (has_lastcheckedwithserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastcheckedwithserver());
    }

    // optional string fullName = 10;
    if (has_fullname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fullname());
    }

    // optional int32 lastInfoChange = 11;
    if (has_lastinfochange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastinfochange());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void contactDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const contactDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const contactDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void contactDetail::MergeFrom(const contactDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_lastname()) {
      set_lastname(from.lastname());
    }
    if (from.has_emailaddress()) {
      set_emailaddress(from.emailaddress());
    }
    if (from.has_currentsentkey()) {
      set_currentsentkey(from.currentsentkey());
    }
    if (from.has_datesentkey()) {
      set_datesentkey(from.datesentkey());
    }
    if (from.has_currentreceivedkey()) {
      set_currentreceivedkey(from.currentreceivedkey());
    }
    if (from.has_datereceivedkey()) {
      set_datereceivedkey(from.datereceivedkey());
    }
    if (from.has_numberoftimescontacted()) {
      set_numberoftimescontacted(from.numberoftimescontacted());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lastcheckedwithserver()) {
      set_lastcheckedwithserver(from.lastcheckedwithserver());
    }
    if (from.has_fullname()) {
      set_fullname(from.fullname());
    }
    if (from.has_lastinfochange()) {
      set_lastinfochange(from.lastinfochange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void contactDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contactDetail::CopyFrom(const contactDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contactDetail::IsInitialized() const {

  return true;
}

void contactDetail::Swap(contactDetail* other) {
  if (other != this) {
    std::swap(firstname_, other->firstname_);
    std::swap(lastname_, other->lastname_);
    std::swap(emailaddress_, other->emailaddress_);
    std::swap(currentsentkey_, other->currentsentkey_);
    std::swap(datesentkey_, other->datesentkey_);
    std::swap(currentreceivedkey_, other->currentreceivedkey_);
    std::swap(datereceivedkey_, other->datereceivedkey_);
    std::swap(numberoftimescontacted_, other->numberoftimescontacted_);
    std::swap(lastcheckedwithserver_, other->lastcheckedwithserver_);
    std::swap(fullname_, other->fullname_);
    std::swap(lastinfochange_, other->lastinfochange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata contactDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = contactDetail_descriptor_;
  metadata.reflection = contactDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int syncKeyExpectation::kFromAddressFieldNumber;
const int syncKeyExpectation::kToAddressFieldNumber;
const int syncKeyExpectation::kKeyLabelFieldNumber;
const int syncKeyExpectation::kDateAnchoredFieldNumber;
#endif  // !_MSC_VER

syncKeyExpectation::syncKeyExpectation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void syncKeyExpectation::InitAsDefaultInstance() {
}

syncKeyExpectation::syncKeyExpectation(const syncKeyExpectation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void syncKeyExpectation::SharedCtor() {
  _cached_size_ = 0;
  fromaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  toaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  keylabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dateanchored_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

syncKeyExpectation::~syncKeyExpectation() {
  SharedDtor();
}

void syncKeyExpectation::SharedDtor() {
  if (fromaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete fromaddress_;
  }
  if (toaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete toaddress_;
  }
  if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
    delete keylabel_;
  }
  if (this != default_instance_) {
  }
}

void syncKeyExpectation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* syncKeyExpectation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return syncKeyExpectation_descriptor_;
}

const syncKeyExpectation& syncKeyExpectation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_syncData_2eproto();
  return *default_instance_;
}

syncKeyExpectation* syncKeyExpectation::default_instance_ = NULL;

syncKeyExpectation* syncKeyExpectation::New() const {
  return new syncKeyExpectation;
}

void syncKeyExpectation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fromaddress()) {
      if (fromaddress_ != &::google::protobuf::internal::kEmptyString) {
        fromaddress_->clear();
      }
    }
    if (has_toaddress()) {
      if (toaddress_ != &::google::protobuf::internal::kEmptyString) {
        toaddress_->clear();
      }
    }
    if (has_keylabel()) {
      if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
        keylabel_->clear();
      }
    }
    dateanchored_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool syncKeyExpectation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fromAddress = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromaddress().data(), this->fromaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toAddress;
        break;
      }

      // optional string toAddress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->toaddress().data(), this->toaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keyLabel;
        break;
      }

      // optional string keyLabel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyLabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keylabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keylabel().data(), this->keylabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dateAnchored;
        break;
      }

      // optional int32 dateAnchored = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateAnchored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dateanchored_)));
          set_has_dateanchored();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void syncKeyExpectation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fromAddress = 1;
  if (has_fromaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromaddress().data(), this->fromaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fromaddress(), output);
  }

  // optional string toAddress = 2;
  if (has_toaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toaddress().data(), this->toaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->toaddress(), output);
  }

  // optional string keyLabel = 3;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keylabel(), output);
  }

  // optional int32 dateAnchored = 4;
  if (has_dateanchored()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dateanchored(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* syncKeyExpectation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fromAddress = 1;
  if (has_fromaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromaddress().data(), this->fromaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fromaddress(), target);
  }

  // optional string toAddress = 2;
  if (has_toaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toaddress().data(), this->toaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->toaddress(), target);
  }

  // optional string keyLabel = 3;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->keylabel(), target);
  }

  // optional int32 dateAnchored = 4;
  if (has_dateanchored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dateanchored(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int syncKeyExpectation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fromAddress = 1;
    if (has_fromaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromaddress());
    }

    // optional string toAddress = 2;
    if (has_toaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toaddress());
    }

    // optional string keyLabel = 3;
    if (has_keylabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keylabel());
    }

    // optional int32 dateAnchored = 4;
    if (has_dateanchored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dateanchored());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void syncKeyExpectation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const syncKeyExpectation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const syncKeyExpectation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void syncKeyExpectation::MergeFrom(const syncKeyExpectation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromaddress()) {
      set_fromaddress(from.fromaddress());
    }
    if (from.has_toaddress()) {
      set_toaddress(from.toaddress());
    }
    if (from.has_keylabel()) {
      set_keylabel(from.keylabel());
    }
    if (from.has_dateanchored()) {
      set_dateanchored(from.dateanchored());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void syncKeyExpectation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void syncKeyExpectation::CopyFrom(const syncKeyExpectation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool syncKeyExpectation::IsInitialized() const {

  return true;
}

void syncKeyExpectation::Swap(syncKeyExpectation* other) {
  if (other != this) {
    std::swap(fromaddress_, other->fromaddress_);
    std::swap(toaddress_, other->toaddress_);
    std::swap(keylabel_, other->keylabel_);
    std::swap(dateanchored_, other->dateanchored_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata syncKeyExpectation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = syncKeyExpectation_descriptor_;
  metadata.reflection = syncKeyExpectation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int syncPrivateKey::kEncrKeyDataFieldNumber;
const int syncPrivateKey::kVerKeyDataFieldNumber;
const int syncPrivateKey::kKeyLabelFieldNumber;
const int syncPrivateKey::kDateCreatedFieldNumber;
const int syncPrivateKey::kIsCompromisedFieldNumber;
const int syncPrivateKey::kVersionFieldNumber;
const int syncPrivateKey::kCurrentKeyForEmailFieldNumber;
const int syncPrivateKey::kDateObtainedFieldNumber;
const int syncPrivateKey::kDateDeclaredFieldNumber;
const int syncPrivateKey::kDateFirstAnchoredFieldNumber;
const int syncPrivateKey::kFromServerFieldNumber;
const int syncPrivateKey::kIntroducesKeysFieldNumber;
const int syncPrivateKey::kIsIntroducedByKeysFieldNumber;
const int syncPrivateKey::kEmailAddressesFieldNumber;
const int syncPrivateKey::kDecrKeyDataFieldNumber;
const int syncPrivateKey::kSignKeyDataFieldNumber;
#endif  // !_MSC_VER

syncPrivateKey::syncPrivateKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void syncPrivateKey::InitAsDefaultInstance() {
}

syncPrivateKey::syncPrivateKey(const syncPrivateKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void syncPrivateKey::SharedCtor() {
  _cached_size_ = 0;
  encrkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  keylabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datecreated_ = 0;
  iscompromised_ = false;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dateobtained_ = 0;
  datedeclared_ = 0;
  datefirstanchored_ = 0;
  fromserver_ = false;
  decrkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

syncPrivateKey::~syncPrivateKey() {
  SharedDtor();
}

void syncPrivateKey::SharedDtor() {
  if (encrkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete encrkeydata_;
  }
  if (verkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete verkeydata_;
  }
  if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
    delete keylabel_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (decrkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete decrkeydata_;
  }
  if (signkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete signkeydata_;
  }
  if (this != default_instance_) {
  }
}

void syncPrivateKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* syncPrivateKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return syncPrivateKey_descriptor_;
}

const syncPrivateKey& syncPrivateKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_syncData_2eproto();
  return *default_instance_;
}

syncPrivateKey* syncPrivateKey::default_instance_ = NULL;

syncPrivateKey* syncPrivateKey::New() const {
  return new syncPrivateKey;
}

void syncPrivateKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_encrkeydata()) {
      if (encrkeydata_ != &::google::protobuf::internal::kEmptyString) {
        encrkeydata_->clear();
      }
    }
    if (has_verkeydata()) {
      if (verkeydata_ != &::google::protobuf::internal::kEmptyString) {
        verkeydata_->clear();
      }
    }
    if (has_keylabel()) {
      if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
        keylabel_->clear();
      }
    }
    datecreated_ = 0;
    iscompromised_ = false;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    dateobtained_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    datedeclared_ = 0;
    datefirstanchored_ = 0;
    fromserver_ = false;
    if (has_decrkeydata()) {
      if (decrkeydata_ != &::google::protobuf::internal::kEmptyString) {
        decrkeydata_->clear();
      }
    }
    if (has_signkeydata()) {
      if (signkeydata_ != &::google::protobuf::internal::kEmptyString) {
        signkeydata_->clear();
      }
    }
  }
  currentkeyforemail_.Clear();
  introduceskeys_.Clear();
  isintroducedbykeys_.Clear();
  emailaddresses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool syncPrivateKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes encrKeyData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_verKeyData;
        break;
      }

      // required bytes verKeyData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keyLabel;
        break;
      }

      // required string keyLabel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyLabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keylabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keylabel().data(), this->keylabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dateCreated;
        break;
      }

      // optional int32 dateCreated = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateCreated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datecreated_)));
          set_has_datecreated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isCompromised;
        break;
      }

      // optional bool isCompromised = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCompromised:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscompromised_)));
          set_has_iscompromised();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }

      // optional string version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_currentKeyForEmail;
        break;
      }

      // repeated string currentKeyForEmail = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentKeyForEmail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_currentkeyforemail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentkeyforemail(this->currentkeyforemail_size() - 1).data(),
            this->currentkeyforemail(this->currentkeyforemail_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_currentKeyForEmail;
        if (input->ExpectTag(64)) goto parse_dateObtained;
        break;
      }

      // optional int32 dateObtained = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateObtained:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dateobtained_)));
          set_has_dateobtained();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dateDeclared;
        break;
      }

      // optional int32 dateDeclared = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateDeclared:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datedeclared_)));
          set_has_datedeclared();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dateFirstAnchored;
        break;
      }

      // optional int32 dateFirstAnchored = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateFirstAnchored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datefirstanchored_)));
          set_has_datefirstanchored();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fromServer;
        break;
      }

      // optional bool fromServer = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromServer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromserver_)));
          set_has_fromserver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_introducesKeys;
        break;
      }

      // repeated string introducesKeys = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_introducesKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_introduceskeys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->introduceskeys(this->introduceskeys_size() - 1).data(),
            this->introduceskeys(this->introduceskeys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_introducesKeys;
        if (input->ExpectTag(106)) goto parse_isIntroducedByKeys;
        break;
      }

      // repeated string isIntroducedByKeys = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isIntroducedByKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_isintroducedbykeys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isintroducedbykeys(this->isintroducedbykeys_size() - 1).data(),
            this->isintroducedbykeys(this->isintroducedbykeys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_isIntroducedByKeys;
        if (input->ExpectTag(114)) goto parse_emailAddresses;
        break;
      }

      // repeated string emailAddresses = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emailAddresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_emailaddresses()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->emailaddresses(this->emailaddresses_size() - 1).data(),
            this->emailaddresses(this->emailaddresses_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_emailAddresses;
        if (input->ExpectTag(122)) goto parse_decrKeyData;
        break;
      }

      // optional bytes decrKeyData = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_decrKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_decrkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_signKeyData;
        break;
      }

      // optional bytes signKeyData = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void syncPrivateKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes encrKeyData = 1;
  if (has_encrkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->encrkeydata(), output);
  }

  // required bytes verKeyData = 2;
  if (has_verkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->verkeydata(), output);
  }

  // required string keyLabel = 3;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keylabel(), output);
  }

  // optional int32 dateCreated = 4;
  if (has_datecreated()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->datecreated(), output);
  }

  // optional bool isCompromised = 5;
  if (has_iscompromised()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->iscompromised(), output);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->version(), output);
  }

  // repeated string currentKeyForEmail = 7;
  for (int i = 0; i < this->currentkeyforemail_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->currentkeyforemail(i).data(), this->currentkeyforemail(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->currentkeyforemail(i), output);
  }

  // optional int32 dateObtained = 8;
  if (has_dateobtained()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dateobtained(), output);
  }

  // optional int32 dateDeclared = 9;
  if (has_datedeclared()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->datedeclared(), output);
  }

  // optional int32 dateFirstAnchored = 10;
  if (has_datefirstanchored()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->datefirstanchored(), output);
  }

  // optional bool fromServer = 11;
  if (has_fromserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->fromserver(), output);
  }

  // repeated string introducesKeys = 12;
  for (int i = 0; i < this->introduceskeys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->introduceskeys(i).data(), this->introduceskeys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->introduceskeys(i), output);
  }

  // repeated string isIntroducedByKeys = 13;
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->isintroducedbykeys(i).data(), this->isintroducedbykeys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->isintroducedbykeys(i), output);
  }

  // repeated string emailAddresses = 14;
  for (int i = 0; i < this->emailaddresses_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->emailaddresses(i).data(), this->emailaddresses(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->emailaddresses(i), output);
  }

  // optional bytes decrKeyData = 15;
  if (has_decrkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->decrkeydata(), output);
  }

  // optional bytes signKeyData = 16;
  if (has_signkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      16, this->signkeydata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* syncPrivateKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes encrKeyData = 1;
  if (has_encrkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->encrkeydata(), target);
  }

  // required bytes verKeyData = 2;
  if (has_verkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->verkeydata(), target);
  }

  // required string keyLabel = 3;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->keylabel(), target);
  }

  // optional int32 dateCreated = 4;
  if (has_datecreated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->datecreated(), target);
  }

  // optional bool isCompromised = 5;
  if (has_iscompromised()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->iscompromised(), target);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  // repeated string currentKeyForEmail = 7;
  for (int i = 0; i < this->currentkeyforemail_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentkeyforemail(i).data(), this->currentkeyforemail(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->currentkeyforemail(i), target);
  }

  // optional int32 dateObtained = 8;
  if (has_dateobtained()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dateobtained(), target);
  }

  // optional int32 dateDeclared = 9;
  if (has_datedeclared()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->datedeclared(), target);
  }

  // optional int32 dateFirstAnchored = 10;
  if (has_datefirstanchored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->datefirstanchored(), target);
  }

  // optional bool fromServer = 11;
  if (has_fromserver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->fromserver(), target);
  }

  // repeated string introducesKeys = 12;
  for (int i = 0; i < this->introduceskeys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->introduceskeys(i).data(), this->introduceskeys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->introduceskeys(i), target);
  }

  // repeated string isIntroducedByKeys = 13;
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isintroducedbykeys(i).data(), this->isintroducedbykeys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->isintroducedbykeys(i), target);
  }

  // repeated string emailAddresses = 14;
  for (int i = 0; i < this->emailaddresses_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emailaddresses(i).data(), this->emailaddresses(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->emailaddresses(i), target);
  }

  // optional bytes decrKeyData = 15;
  if (has_decrkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->decrkeydata(), target);
  }

  // optional bytes signKeyData = 16;
  if (has_signkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->signkeydata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int syncPrivateKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes encrKeyData = 1;
    if (has_encrkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrkeydata());
    }

    // required bytes verKeyData = 2;
    if (has_verkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->verkeydata());
    }

    // required string keyLabel = 3;
    if (has_keylabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keylabel());
    }

    // optional int32 dateCreated = 4;
    if (has_datecreated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datecreated());
    }

    // optional bool isCompromised = 5;
    if (has_iscompromised()) {
      total_size += 1 + 1;
    }

    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 dateObtained = 8;
    if (has_dateobtained()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dateobtained());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 dateDeclared = 9;
    if (has_datedeclared()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datedeclared());
    }

    // optional int32 dateFirstAnchored = 10;
    if (has_datefirstanchored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datefirstanchored());
    }

    // optional bool fromServer = 11;
    if (has_fromserver()) {
      total_size += 1 + 1;
    }

    // optional bytes decrKeyData = 15;
    if (has_decrkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->decrkeydata());
    }

    // optional bytes signKeyData = 16;
    if (has_signkeydata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signkeydata());
    }

  }
  // repeated string currentKeyForEmail = 7;
  total_size += 1 * this->currentkeyforemail_size();
  for (int i = 0; i < this->currentkeyforemail_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->currentkeyforemail(i));
  }

  // repeated string introducesKeys = 12;
  total_size += 1 * this->introduceskeys_size();
  for (int i = 0; i < this->introduceskeys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->introduceskeys(i));
  }

  // repeated string isIntroducedByKeys = 13;
  total_size += 1 * this->isintroducedbykeys_size();
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->isintroducedbykeys(i));
  }

  // repeated string emailAddresses = 14;
  total_size += 1 * this->emailaddresses_size();
  for (int i = 0; i < this->emailaddresses_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->emailaddresses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void syncPrivateKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const syncPrivateKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const syncPrivateKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void syncPrivateKey::MergeFrom(const syncPrivateKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  currentkeyforemail_.MergeFrom(from.currentkeyforemail_);
  introduceskeys_.MergeFrom(from.introduceskeys_);
  isintroducedbykeys_.MergeFrom(from.isintroducedbykeys_);
  emailaddresses_.MergeFrom(from.emailaddresses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encrkeydata()) {
      set_encrkeydata(from.encrkeydata());
    }
    if (from.has_verkeydata()) {
      set_verkeydata(from.verkeydata());
    }
    if (from.has_keylabel()) {
      set_keylabel(from.keylabel());
    }
    if (from.has_datecreated()) {
      set_datecreated(from.datecreated());
    }
    if (from.has_iscompromised()) {
      set_iscompromised(from.iscompromised());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_dateobtained()) {
      set_dateobtained(from.dateobtained());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_datedeclared()) {
      set_datedeclared(from.datedeclared());
    }
    if (from.has_datefirstanchored()) {
      set_datefirstanchored(from.datefirstanchored());
    }
    if (from.has_fromserver()) {
      set_fromserver(from.fromserver());
    }
    if (from.has_decrkeydata()) {
      set_decrkeydata(from.decrkeydata());
    }
    if (from.has_signkeydata()) {
      set_signkeydata(from.signkeydata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void syncPrivateKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void syncPrivateKey::CopyFrom(const syncPrivateKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool syncPrivateKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void syncPrivateKey::Swap(syncPrivateKey* other) {
  if (other != this) {
    std::swap(encrkeydata_, other->encrkeydata_);
    std::swap(verkeydata_, other->verkeydata_);
    std::swap(keylabel_, other->keylabel_);
    std::swap(datecreated_, other->datecreated_);
    std::swap(iscompromised_, other->iscompromised_);
    std::swap(version_, other->version_);
    currentkeyforemail_.Swap(&other->currentkeyforemail_);
    std::swap(dateobtained_, other->dateobtained_);
    std::swap(datedeclared_, other->datedeclared_);
    std::swap(datefirstanchored_, other->datefirstanchored_);
    std::swap(fromserver_, other->fromserver_);
    introduceskeys_.Swap(&other->introduceskeys_);
    isintroducedbykeys_.Swap(&other->isintroducedbykeys_);
    emailaddresses_.Swap(&other->emailaddresses_);
    std::swap(decrkeydata_, other->decrkeydata_);
    std::swap(signkeydata_, other->signkeydata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata syncPrivateKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = syncPrivateKey_descriptor_;
  metadata.reflection = syncPrivateKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int syncPublicKey::kEncrKeyDataFieldNumber;
const int syncPublicKey::kVerKeyDataFieldNumber;
const int syncPublicKey::kKeyLabelFieldNumber;
const int syncPublicKey::kDateCreatedFieldNumber;
const int syncPublicKey::kCompromisedFieldNumber;
const int syncPublicKey::kVersionFieldNumber;
const int syncPublicKey::kCurrentKeyForEmailFieldNumber;
const int syncPublicKey::kDateObtainedFieldNumber;
const int syncPublicKey::kDateDeclaredFieldNumber;
const int syncPublicKey::kDateFirstAnchoredFieldNumber;
const int syncPublicKey::kFromServerFieldNumber;
const int syncPublicKey::kIntroducesKeysFieldNumber;
const int syncPublicKey::kIsIntroducedByKeysFieldNumber;
const int syncPublicKey::kEmailAddressesFieldNumber;
#endif  // !_MSC_VER

syncPublicKey::syncPublicKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void syncPublicKey::InitAsDefaultInstance() {
}

syncPublicKey::syncPublicKey(const syncPublicKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void syncPublicKey::SharedCtor() {
  _cached_size_ = 0;
  encrkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verkeydata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  keylabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datecreated_ = 0;
  compromised_ = false;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dateobtained_ = 0;
  datedeclared_ = 0;
  datefirstanchored_ = 0;
  fromserver_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

syncPublicKey::~syncPublicKey() {
  SharedDtor();
}

void syncPublicKey::SharedDtor() {
  if (encrkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete encrkeydata_;
  }
  if (verkeydata_ != &::google::protobuf::internal::kEmptyString) {
    delete verkeydata_;
  }
  if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
    delete keylabel_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void syncPublicKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* syncPublicKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return syncPublicKey_descriptor_;
}

const syncPublicKey& syncPublicKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_syncData_2eproto();
  return *default_instance_;
}

syncPublicKey* syncPublicKey::default_instance_ = NULL;

syncPublicKey* syncPublicKey::New() const {
  return new syncPublicKey;
}

void syncPublicKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_encrkeydata()) {
      if (encrkeydata_ != &::google::protobuf::internal::kEmptyString) {
        encrkeydata_->clear();
      }
    }
    if (has_verkeydata()) {
      if (verkeydata_ != &::google::protobuf::internal::kEmptyString) {
        verkeydata_->clear();
      }
    }
    if (has_keylabel()) {
      if (keylabel_ != &::google::protobuf::internal::kEmptyString) {
        keylabel_->clear();
      }
    }
    datecreated_ = 0;
    compromised_ = false;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    dateobtained_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    datedeclared_ = 0;
    datefirstanchored_ = 0;
    fromserver_ = false;
  }
  currentkeyforemail_.Clear();
  introduceskeys_.Clear();
  isintroducedbykeys_.Clear();
  emailaddresses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool syncPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes encrKeyData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_verKeyData;
        break;
      }

      // required bytes verKeyData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verKeyData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verkeydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keyLabel;
        break;
      }

      // required string keyLabel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyLabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keylabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keylabel().data(), this->keylabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dateCreated;
        break;
      }

      // optional int32 dateCreated = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateCreated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datecreated_)));
          set_has_datecreated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_compromised;
        break;
      }

      // optional bool compromised = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compromised:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compromised_)));
          set_has_compromised();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }

      // optional string version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_currentKeyForEmail;
        break;
      }

      // repeated string currentKeyForEmail = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentKeyForEmail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_currentkeyforemail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentkeyforemail(this->currentkeyforemail_size() - 1).data(),
            this->currentkeyforemail(this->currentkeyforemail_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_currentKeyForEmail;
        if (input->ExpectTag(64)) goto parse_dateObtained;
        break;
      }

      // optional int32 dateObtained = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateObtained:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dateobtained_)));
          set_has_dateobtained();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dateDeclared;
        break;
      }

      // optional int32 dateDeclared = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateDeclared:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datedeclared_)));
          set_has_datedeclared();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dateFirstAnchored;
        break;
      }

      // optional int32 dateFirstAnchored = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateFirstAnchored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datefirstanchored_)));
          set_has_datefirstanchored();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fromServer;
        break;
      }

      // optional bool fromServer = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromServer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fromserver_)));
          set_has_fromserver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_introducesKeys;
        break;
      }

      // repeated string introducesKeys = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_introducesKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_introduceskeys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->introduceskeys(this->introduceskeys_size() - 1).data(),
            this->introduceskeys(this->introduceskeys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_introducesKeys;
        if (input->ExpectTag(106)) goto parse_isIntroducedByKeys;
        break;
      }

      // repeated string isIntroducedByKeys = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isIntroducedByKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_isintroducedbykeys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isintroducedbykeys(this->isintroducedbykeys_size() - 1).data(),
            this->isintroducedbykeys(this->isintroducedbykeys_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_isIntroducedByKeys;
        if (input->ExpectTag(114)) goto parse_emailAddresses;
        break;
      }

      // repeated string emailAddresses = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emailAddresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_emailaddresses()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->emailaddresses(this->emailaddresses_size() - 1).data(),
            this->emailaddresses(this->emailaddresses_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_emailAddresses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void syncPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes encrKeyData = 1;
  if (has_encrkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->encrkeydata(), output);
  }

  // required bytes verKeyData = 2;
  if (has_verkeydata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->verkeydata(), output);
  }

  // required string keyLabel = 3;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keylabel(), output);
  }

  // optional int32 dateCreated = 4;
  if (has_datecreated()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->datecreated(), output);
  }

  // optional bool compromised = 5;
  if (has_compromised()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->compromised(), output);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->version(), output);
  }

  // repeated string currentKeyForEmail = 7;
  for (int i = 0; i < this->currentkeyforemail_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->currentkeyforemail(i).data(), this->currentkeyforemail(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->currentkeyforemail(i), output);
  }

  // optional int32 dateObtained = 8;
  if (has_dateobtained()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dateobtained(), output);
  }

  // optional int32 dateDeclared = 9;
  if (has_datedeclared()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->datedeclared(), output);
  }

  // optional int32 dateFirstAnchored = 10;
  if (has_datefirstanchored()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->datefirstanchored(), output);
  }

  // optional bool fromServer = 11;
  if (has_fromserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->fromserver(), output);
  }

  // repeated string introducesKeys = 12;
  for (int i = 0; i < this->introduceskeys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->introduceskeys(i).data(), this->introduceskeys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->introduceskeys(i), output);
  }

  // repeated string isIntroducedByKeys = 13;
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->isintroducedbykeys(i).data(), this->isintroducedbykeys(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->isintroducedbykeys(i), output);
  }

  // repeated string emailAddresses = 14;
  for (int i = 0; i < this->emailaddresses_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->emailaddresses(i).data(), this->emailaddresses(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->emailaddresses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* syncPublicKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes encrKeyData = 1;
  if (has_encrkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->encrkeydata(), target);
  }

  // required bytes verKeyData = 2;
  if (has_verkeydata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->verkeydata(), target);
  }

  // required string keyLabel = 3;
  if (has_keylabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keylabel().data(), this->keylabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->keylabel(), target);
  }

  // optional int32 dateCreated = 4;
  if (has_datecreated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->datecreated(), target);
  }

  // optional bool compromised = 5;
  if (has_compromised()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->compromised(), target);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  // repeated string currentKeyForEmail = 7;
  for (int i = 0; i < this->currentkeyforemail_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentkeyforemail(i).data(), this->currentkeyforemail(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->currentkeyforemail(i), target);
  }

  // optional int32 dateObtained = 8;
  if (has_dateobtained()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dateobtained(), target);
  }

  // optional int32 dateDeclared = 9;
  if (has_datedeclared()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->datedeclared(), target);
  }

  // optional int32 dateFirstAnchored = 10;
  if (has_datefirstanchored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->datefirstanchored(), target);
  }

  // optional bool fromServer = 11;
  if (has_fromserver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->fromserver(), target);
  }

  // repeated string introducesKeys = 12;
  for (int i = 0; i < this->introduceskeys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->introduceskeys(i).data(), this->introduceskeys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->introduceskeys(i), target);
  }

  // repeated string isIntroducedByKeys = 13;
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isintroducedbykeys(i).data(), this->isintroducedbykeys(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->isintroducedbykeys(i), target);
  }

  // repeated string emailAddresses = 14;
  for (int i = 0; i < this->emailaddresses_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emailaddresses(i).data(), this->emailaddresses(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->emailaddresses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int syncPublicKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes encrKeyData = 1;
    if (has_encrkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrkeydata());
    }

    // required bytes verKeyData = 2;
    if (has_verkeydata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->verkeydata());
    }

    // required string keyLabel = 3;
    if (has_keylabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keylabel());
    }

    // optional int32 dateCreated = 4;
    if (has_datecreated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datecreated());
    }

    // optional bool compromised = 5;
    if (has_compromised()) {
      total_size += 1 + 1;
    }

    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 dateObtained = 8;
    if (has_dateobtained()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dateobtained());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 dateDeclared = 9;
    if (has_datedeclared()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datedeclared());
    }

    // optional int32 dateFirstAnchored = 10;
    if (has_datefirstanchored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datefirstanchored());
    }

    // optional bool fromServer = 11;
    if (has_fromserver()) {
      total_size += 1 + 1;
    }

  }
  // repeated string currentKeyForEmail = 7;
  total_size += 1 * this->currentkeyforemail_size();
  for (int i = 0; i < this->currentkeyforemail_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->currentkeyforemail(i));
  }

  // repeated string introducesKeys = 12;
  total_size += 1 * this->introduceskeys_size();
  for (int i = 0; i < this->introduceskeys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->introduceskeys(i));
  }

  // repeated string isIntroducedByKeys = 13;
  total_size += 1 * this->isintroducedbykeys_size();
  for (int i = 0; i < this->isintroducedbykeys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->isintroducedbykeys(i));
  }

  // repeated string emailAddresses = 14;
  total_size += 1 * this->emailaddresses_size();
  for (int i = 0; i < this->emailaddresses_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->emailaddresses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void syncPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const syncPublicKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const syncPublicKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void syncPublicKey::MergeFrom(const syncPublicKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  currentkeyforemail_.MergeFrom(from.currentkeyforemail_);
  introduceskeys_.MergeFrom(from.introduceskeys_);
  isintroducedbykeys_.MergeFrom(from.isintroducedbykeys_);
  emailaddresses_.MergeFrom(from.emailaddresses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encrkeydata()) {
      set_encrkeydata(from.encrkeydata());
    }
    if (from.has_verkeydata()) {
      set_verkeydata(from.verkeydata());
    }
    if (from.has_keylabel()) {
      set_keylabel(from.keylabel());
    }
    if (from.has_datecreated()) {
      set_datecreated(from.datecreated());
    }
    if (from.has_compromised()) {
      set_compromised(from.compromised());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_dateobtained()) {
      set_dateobtained(from.dateobtained());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_datedeclared()) {
      set_datedeclared(from.datedeclared());
    }
    if (from.has_datefirstanchored()) {
      set_datefirstanchored(from.datefirstanchored());
    }
    if (from.has_fromserver()) {
      set_fromserver(from.fromserver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void syncPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void syncPublicKey::CopyFrom(const syncPublicKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool syncPublicKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void syncPublicKey::Swap(syncPublicKey* other) {
  if (other != this) {
    std::swap(encrkeydata_, other->encrkeydata_);
    std::swap(verkeydata_, other->verkeydata_);
    std::swap(keylabel_, other->keylabel_);
    std::swap(datecreated_, other->datecreated_);
    std::swap(compromised_, other->compromised_);
    std::swap(version_, other->version_);
    currentkeyforemail_.Swap(&other->currentkeyforemail_);
    std::swap(dateobtained_, other->dateobtained_);
    std::swap(datedeclared_, other->datedeclared_);
    std::swap(datefirstanchored_, other->datefirstanchored_);
    std::swap(fromserver_, other->fromserver_);
    introduceskeys_.Swap(&other->introduceskeys_);
    isintroducedbykeys_.Swap(&other->isintroducedbykeys_);
    emailaddresses_.Swap(&other->emailaddresses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata syncPublicKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = syncPublicKey_descriptor_;
  metadata.reflection = syncPublicKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int syncData::kPrivKeysFieldNumber;
const int syncData::kPubKeysFieldNumber;
const int syncData::kAccountsFieldNumber;
const int syncData::kContactsFieldNumber;
const int syncData::kKeyExpectationsFieldNumber;
#endif  // !_MSC_VER

syncData::syncData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void syncData::InitAsDefaultInstance() {
}

syncData::syncData(const syncData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void syncData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

syncData::~syncData() {
  SharedDtor();
}

void syncData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void syncData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* syncData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return syncData_descriptor_;
}

const syncData& syncData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_syncData_2eproto();
  return *default_instance_;
}

syncData* syncData::default_instance_ = NULL;

syncData* syncData::New() const {
  return new syncData;
}

void syncData::Clear() {
  privkeys_.Clear();
  pubkeys_.Clear();
  accounts_.Clear();
  contacts_.Clear();
  keyexpectations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool syncData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mynigma.syncPrivateKey privKeys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_privKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_privkeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_privKeys;
        if (input->ExpectTag(18)) goto parse_pubKeys;
        break;
      }

      // repeated .mynigma.syncPublicKey pubKeys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pubKeys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pubkeys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pubKeys;
        if (input->ExpectTag(26)) goto parse_accounts;
        break;
      }

      // repeated .mynigma.accountLoginData accounts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accounts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accounts;
        if (input->ExpectTag(34)) goto parse_contacts;
        break;
      }

      // repeated .mynigma.contactDetail contacts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contacts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contacts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_contacts;
        if (input->ExpectTag(42)) goto parse_keyExpectations;
        break;
      }

      // repeated .mynigma.syncKeyExpectation keyExpectations = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyExpectations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keyexpectations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_keyExpectations;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void syncData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mynigma.syncPrivateKey privKeys = 1;
  for (int i = 0; i < this->privkeys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->privkeys(i), output);
  }

  // repeated .mynigma.syncPublicKey pubKeys = 2;
  for (int i = 0; i < this->pubkeys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pubkeys(i), output);
  }

  // repeated .mynigma.accountLoginData accounts = 3;
  for (int i = 0; i < this->accounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->accounts(i), output);
  }

  // repeated .mynigma.contactDetail contacts = 4;
  for (int i = 0; i < this->contacts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->contacts(i), output);
  }

  // repeated .mynigma.syncKeyExpectation keyExpectations = 5;
  for (int i = 0; i < this->keyexpectations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->keyexpectations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* syncData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mynigma.syncPrivateKey privKeys = 1;
  for (int i = 0; i < this->privkeys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->privkeys(i), target);
  }

  // repeated .mynigma.syncPublicKey pubKeys = 2;
  for (int i = 0; i < this->pubkeys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pubkeys(i), target);
  }

  // repeated .mynigma.accountLoginData accounts = 3;
  for (int i = 0; i < this->accounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->accounts(i), target);
  }

  // repeated .mynigma.contactDetail contacts = 4;
  for (int i = 0; i < this->contacts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->contacts(i), target);
  }

  // repeated .mynigma.syncKeyExpectation keyExpectations = 5;
  for (int i = 0; i < this->keyexpectations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->keyexpectations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int syncData::ByteSize() const {
  int total_size = 0;

  // repeated .mynigma.syncPrivateKey privKeys = 1;
  total_size += 1 * this->privkeys_size();
  for (int i = 0; i < this->privkeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->privkeys(i));
  }

  // repeated .mynigma.syncPublicKey pubKeys = 2;
  total_size += 1 * this->pubkeys_size();
  for (int i = 0; i < this->pubkeys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pubkeys(i));
  }

  // repeated .mynigma.accountLoginData accounts = 3;
  total_size += 1 * this->accounts_size();
  for (int i = 0; i < this->accounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accounts(i));
  }

  // repeated .mynigma.contactDetail contacts = 4;
  total_size += 1 * this->contacts_size();
  for (int i = 0; i < this->contacts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contacts(i));
  }

  // repeated .mynigma.syncKeyExpectation keyExpectations = 5;
  total_size += 1 * this->keyexpectations_size();
  for (int i = 0; i < this->keyexpectations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyexpectations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void syncData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const syncData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const syncData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void syncData::MergeFrom(const syncData& from) {
  GOOGLE_CHECK_NE(&from, this);
  privkeys_.MergeFrom(from.privkeys_);
  pubkeys_.MergeFrom(from.pubkeys_);
  accounts_.MergeFrom(from.accounts_);
  contacts_.MergeFrom(from.contacts_);
  keyexpectations_.MergeFrom(from.keyexpectations_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void syncData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void syncData::CopyFrom(const syncData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool syncData::IsInitialized() const {

  for (int i = 0; i < privkeys_size(); i++) {
    if (!this->privkeys(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pubkeys_size(); i++) {
    if (!this->pubkeys(i).IsInitialized()) return false;
  }
  for (int i = 0; i < accounts_size(); i++) {
    if (!this->accounts(i).IsInitialized()) return false;
  }
  return true;
}

void syncData::Swap(syncData* other) {
  if (other != this) {
    privkeys_.Swap(&other->privkeys_);
    pubkeys_.Swap(&other->pubkeys_);
    accounts_.Swap(&other->accounts_);
    contacts_.Swap(&other->contacts_);
    keyexpectations_.Swap(&other->keyexpectations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata syncData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = syncData_descriptor_;
  metadata.reflection = syncData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int deviceDiscoveryData::kUUIDFieldNumber;
const int deviceDiscoveryData::kTypeFieldNumber;
const int deviceDiscoveryData::kNameFieldNumber;
const int deviceDiscoveryData::kEmailAdressesFieldNumber;
const int deviceDiscoveryData::kPrivateKeyLabelsFieldNumber;
#endif  // !_MSC_VER

deviceDiscoveryData::deviceDiscoveryData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void deviceDiscoveryData::InitAsDefaultInstance() {
}

deviceDiscoveryData::deviceDiscoveryData(const deviceDiscoveryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void deviceDiscoveryData::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

deviceDiscoveryData::~deviceDiscoveryData() {
  SharedDtor();
}

void deviceDiscoveryData::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void deviceDiscoveryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* deviceDiscoveryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return deviceDiscoveryData_descriptor_;
}

const deviceDiscoveryData& deviceDiscoveryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_syncData_2eproto();
  return *default_instance_;
}

deviceDiscoveryData* deviceDiscoveryData::default_instance_ = NULL;

deviceDiscoveryData* deviceDiscoveryData::New() const {
  return new deviceDiscoveryData;
}

void deviceDiscoveryData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  emailadresses_.Clear();
  privatekeylabels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool deviceDiscoveryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_emailAdresses;
        break;
      }

      // repeated string emailAdresses = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emailAdresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_emailadresses()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->emailadresses(this->emailadresses_size() - 1).data(),
            this->emailadresses(this->emailadresses_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_emailAdresses;
        if (input->ExpectTag(42)) goto parse_privateKeyLabels;
        break;
      }

      // repeated string privateKeyLabels = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_privateKeyLabels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_privatekeylabels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->privatekeylabels(this->privatekeylabels_size() - 1).data(),
            this->privatekeylabels(this->privatekeylabels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_privateKeyLabels;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void deviceDiscoveryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string UUID = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uuid(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // repeated string emailAdresses = 4;
  for (int i = 0; i < this->emailadresses_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->emailadresses(i).data(), this->emailadresses(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->emailadresses(i), output);
  }

  // repeated string privateKeyLabels = 5;
  for (int i = 0; i < this->privatekeylabels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->privatekeylabels(i).data(), this->privatekeylabels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->privatekeylabels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* deviceDiscoveryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string UUID = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated string emailAdresses = 4;
  for (int i = 0; i < this->emailadresses_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emailadresses(i).data(), this->emailadresses(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->emailadresses(i), target);
  }

  // repeated string privateKeyLabels = 5;
  for (int i = 0; i < this->privatekeylabels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->privatekeylabels(i).data(), this->privatekeylabels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->privatekeylabels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int deviceDiscoveryData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string UUID = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated string emailAdresses = 4;
  total_size += 1 * this->emailadresses_size();
  for (int i = 0; i < this->emailadresses_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->emailadresses(i));
  }

  // repeated string privateKeyLabels = 5;
  total_size += 1 * this->privatekeylabels_size();
  for (int i = 0; i < this->privatekeylabels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->privatekeylabels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void deviceDiscoveryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const deviceDiscoveryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const deviceDiscoveryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void deviceDiscoveryData::MergeFrom(const deviceDiscoveryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  emailadresses_.MergeFrom(from.emailadresses_);
  privatekeylabels_.MergeFrom(from.privatekeylabels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void deviceDiscoveryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void deviceDiscoveryData::CopyFrom(const deviceDiscoveryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deviceDiscoveryData::IsInitialized() const {

  return true;
}

void deviceDiscoveryData::Swap(deviceDiscoveryData* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    emailadresses_.Swap(&other->emailadresses_);
    privatekeylabels_.Swap(&other->privatekeylabels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata deviceDiscoveryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = deviceDiscoveryData_descriptor_;
  metadata.reflection = deviceDiscoveryData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mynigma

// @@protoc_insertion_point(global_scope)
